
stm32f401ccu6_bmp180_example_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003888  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003a28  08003a28  00004a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a9c  08003a9c  00005060  2**0
                  CONTENTS
  4 .ARM          00000008  08003a9c  08003a9c  00004a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003aa4  08003aa4  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003aa4  08003aa4  00004aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003aa8  08003aa8  00004aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003aac  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000060  08003b0c  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08003b0c  00005290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007af4  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001899  00000000  00000000  0000cb84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  0000e420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005e9  00000000  00000000  0000ebe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a4e  00000000  00000000  0000f1d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a817  00000000  00000000  00024c1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084fb9  00000000  00000000  0002f436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b43ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000240c  00000000  00000000  000b4434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000b6840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003a10 	.word	0x08003a10

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08003a10 	.word	0x08003a10

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <BMP180_Init>:

/**
 * @brief Initializes the BMP180 temperature/pressure sensor.
 * @param hi2c User I2C handle pointer.
 */
void BMP180_Init(I2C_HandleTypeDef *hi2c1) {
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	_bmp180_ui2c = hi2c1;
 8000588:	4a04      	ldr	r2, [pc, #16]	@ (800059c <BMP180_Init+0x1c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	2000007c 	.word	0x2000007c

080005a0 <BMP180_SetOversampling>:
/**
 * @param oss Enum, oversampling setting.
 * @note Available resolutions: BMP180_LOW, BMP180_STANDARD, BMP180_HIGH, BMP180_ULTRA.
 * @note Refer to section 3.3.1 of datasheet.
 */
void BMP180_SetOversampling(BMP180_OSS oss) {
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
	_bmp180_oss = oss;
 80005aa:	4a04      	ldr	r2, [pc, #16]	@ (80005bc <BMP180_SetOversampling+0x1c>)
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	7013      	strb	r3, [r2, #0]
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	20000096 	.word	0x20000096

080005c0 <BMP180_UpdateCalibrationData>:

/**
 * @brief Updates calibration data.
 * @note Must be called once before main loop.
 */
void BMP180_UpdateCalibrationData(void) {
 80005c0:	b598      	push	{r3, r4, r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	_bmp180_eeprom.BMP180_AC1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC1]);
 80005c4:	23aa      	movs	r3, #170	@ 0xaa
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 f8dc 	bl	8000784 <BMP180_ReadReg>
 80005cc:	4603      	mov	r3, r0
 80005ce:	021b      	lsls	r3, r3, #8
 80005d0:	b21c      	sxth	r4, r3
 80005d2:	23ab      	movs	r3, #171	@ 0xab
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 f8d5 	bl	8000784 <BMP180_ReadReg>
 80005da:	4603      	mov	r3, r0
 80005dc:	b21b      	sxth	r3, r3
 80005de:	4323      	orrs	r3, r4
 80005e0:	b21a      	sxth	r2, r3
 80005e2:	4b58      	ldr	r3, [pc, #352]	@ (8000744 <BMP180_UpdateCalibrationData+0x184>)
 80005e4:	801a      	strh	r2, [r3, #0]
	_bmp180_eeprom.BMP180_AC2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC2]);
 80005e6:	23ac      	movs	r3, #172	@ 0xac
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 f8cb 	bl	8000784 <BMP180_ReadReg>
 80005ee:	4603      	mov	r3, r0
 80005f0:	021b      	lsls	r3, r3, #8
 80005f2:	b21c      	sxth	r4, r3
 80005f4:	23ad      	movs	r3, #173	@ 0xad
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f8c4 	bl	8000784 <BMP180_ReadReg>
 80005fc:	4603      	mov	r3, r0
 80005fe:	b21b      	sxth	r3, r3
 8000600:	4323      	orrs	r3, r4
 8000602:	b21a      	sxth	r2, r3
 8000604:	4b4f      	ldr	r3, [pc, #316]	@ (8000744 <BMP180_UpdateCalibrationData+0x184>)
 8000606:	805a      	strh	r2, [r3, #2]
	_bmp180_eeprom.BMP180_AC3 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC3]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC3]);
 8000608:	23ae      	movs	r3, #174	@ 0xae
 800060a:	4618      	mov	r0, r3
 800060c:	f000 f8ba 	bl	8000784 <BMP180_ReadReg>
 8000610:	4603      	mov	r3, r0
 8000612:	021b      	lsls	r3, r3, #8
 8000614:	b21c      	sxth	r4, r3
 8000616:	23af      	movs	r3, #175	@ 0xaf
 8000618:	4618      	mov	r0, r3
 800061a:	f000 f8b3 	bl	8000784 <BMP180_ReadReg>
 800061e:	4603      	mov	r3, r0
 8000620:	b21b      	sxth	r3, r3
 8000622:	4323      	orrs	r3, r4
 8000624:	b21a      	sxth	r2, r3
 8000626:	4b47      	ldr	r3, [pc, #284]	@ (8000744 <BMP180_UpdateCalibrationData+0x184>)
 8000628:	809a      	strh	r2, [r3, #4]
	_bmp180_eeprom.BMP180_AC4 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC4]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC4]);
 800062a:	23b0      	movs	r3, #176	@ 0xb0
 800062c:	4618      	mov	r0, r3
 800062e:	f000 f8a9 	bl	8000784 <BMP180_ReadReg>
 8000632:	4603      	mov	r3, r0
 8000634:	021b      	lsls	r3, r3, #8
 8000636:	b21c      	sxth	r4, r3
 8000638:	23b1      	movs	r3, #177	@ 0xb1
 800063a:	4618      	mov	r0, r3
 800063c:	f000 f8a2 	bl	8000784 <BMP180_ReadReg>
 8000640:	4603      	mov	r3, r0
 8000642:	b21b      	sxth	r3, r3
 8000644:	4323      	orrs	r3, r4
 8000646:	b21b      	sxth	r3, r3
 8000648:	b29a      	uxth	r2, r3
 800064a:	4b3e      	ldr	r3, [pc, #248]	@ (8000744 <BMP180_UpdateCalibrationData+0x184>)
 800064c:	80da      	strh	r2, [r3, #6]
	_bmp180_eeprom.BMP180_AC5 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC5]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC5]);
 800064e:	23b2      	movs	r3, #178	@ 0xb2
 8000650:	4618      	mov	r0, r3
 8000652:	f000 f897 	bl	8000784 <BMP180_ReadReg>
 8000656:	4603      	mov	r3, r0
 8000658:	021b      	lsls	r3, r3, #8
 800065a:	b21c      	sxth	r4, r3
 800065c:	23b3      	movs	r3, #179	@ 0xb3
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f890 	bl	8000784 <BMP180_ReadReg>
 8000664:	4603      	mov	r3, r0
 8000666:	b21b      	sxth	r3, r3
 8000668:	4323      	orrs	r3, r4
 800066a:	b21b      	sxth	r3, r3
 800066c:	b29a      	uxth	r2, r3
 800066e:	4b35      	ldr	r3, [pc, #212]	@ (8000744 <BMP180_UpdateCalibrationData+0x184>)
 8000670:	811a      	strh	r2, [r3, #8]
	_bmp180_eeprom.BMP180_AC6 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC6]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC6]);
 8000672:	23b4      	movs	r3, #180	@ 0xb4
 8000674:	4618      	mov	r0, r3
 8000676:	f000 f885 	bl	8000784 <BMP180_ReadReg>
 800067a:	4603      	mov	r3, r0
 800067c:	021b      	lsls	r3, r3, #8
 800067e:	b21c      	sxth	r4, r3
 8000680:	23b5      	movs	r3, #181	@ 0xb5
 8000682:	4618      	mov	r0, r3
 8000684:	f000 f87e 	bl	8000784 <BMP180_ReadReg>
 8000688:	4603      	mov	r3, r0
 800068a:	b21b      	sxth	r3, r3
 800068c:	4323      	orrs	r3, r4
 800068e:	b21b      	sxth	r3, r3
 8000690:	b29a      	uxth	r2, r3
 8000692:	4b2c      	ldr	r3, [pc, #176]	@ (8000744 <BMP180_UpdateCalibrationData+0x184>)
 8000694:	815a      	strh	r2, [r3, #10]
	_bmp180_eeprom.BMP180_B1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B1]);
 8000696:	23b6      	movs	r3, #182	@ 0xb6
 8000698:	4618      	mov	r0, r3
 800069a:	f000 f873 	bl	8000784 <BMP180_ReadReg>
 800069e:	4603      	mov	r3, r0
 80006a0:	021b      	lsls	r3, r3, #8
 80006a2:	b21c      	sxth	r4, r3
 80006a4:	23b7      	movs	r3, #183	@ 0xb7
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 f86c 	bl	8000784 <BMP180_ReadReg>
 80006ac:	4603      	mov	r3, r0
 80006ae:	b21b      	sxth	r3, r3
 80006b0:	4323      	orrs	r3, r4
 80006b2:	b21a      	sxth	r2, r3
 80006b4:	4b23      	ldr	r3, [pc, #140]	@ (8000744 <BMP180_UpdateCalibrationData+0x184>)
 80006b6:	819a      	strh	r2, [r3, #12]
	_bmp180_eeprom.BMP180_B2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B2]);
 80006b8:	23b8      	movs	r3, #184	@ 0xb8
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 f862 	bl	8000784 <BMP180_ReadReg>
 80006c0:	4603      	mov	r3, r0
 80006c2:	021b      	lsls	r3, r3, #8
 80006c4:	b21c      	sxth	r4, r3
 80006c6:	23b9      	movs	r3, #185	@ 0xb9
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 f85b 	bl	8000784 <BMP180_ReadReg>
 80006ce:	4603      	mov	r3, r0
 80006d0:	b21b      	sxth	r3, r3
 80006d2:	4323      	orrs	r3, r4
 80006d4:	b21a      	sxth	r2, r3
 80006d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000744 <BMP180_UpdateCalibrationData+0x184>)
 80006d8:	81da      	strh	r2, [r3, #14]
	_bmp180_eeprom.BMP180_MB = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MB]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MB]);
 80006da:	23ba      	movs	r3, #186	@ 0xba
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 f851 	bl	8000784 <BMP180_ReadReg>
 80006e2:	4603      	mov	r3, r0
 80006e4:	021b      	lsls	r3, r3, #8
 80006e6:	b21c      	sxth	r4, r3
 80006e8:	23bb      	movs	r3, #187	@ 0xbb
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 f84a 	bl	8000784 <BMP180_ReadReg>
 80006f0:	4603      	mov	r3, r0
 80006f2:	b21b      	sxth	r3, r3
 80006f4:	4323      	orrs	r3, r4
 80006f6:	b21a      	sxth	r2, r3
 80006f8:	4b12      	ldr	r3, [pc, #72]	@ (8000744 <BMP180_UpdateCalibrationData+0x184>)
 80006fa:	821a      	strh	r2, [r3, #16]
	_bmp180_eeprom.BMP180_MC = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MC]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MC]);
 80006fc:	23bc      	movs	r3, #188	@ 0xbc
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 f840 	bl	8000784 <BMP180_ReadReg>
 8000704:	4603      	mov	r3, r0
 8000706:	021b      	lsls	r3, r3, #8
 8000708:	b21c      	sxth	r4, r3
 800070a:	23bd      	movs	r3, #189	@ 0xbd
 800070c:	4618      	mov	r0, r3
 800070e:	f000 f839 	bl	8000784 <BMP180_ReadReg>
 8000712:	4603      	mov	r3, r0
 8000714:	b21b      	sxth	r3, r3
 8000716:	4323      	orrs	r3, r4
 8000718:	b21a      	sxth	r2, r3
 800071a:	4b0a      	ldr	r3, [pc, #40]	@ (8000744 <BMP180_UpdateCalibrationData+0x184>)
 800071c:	825a      	strh	r2, [r3, #18]
	_bmp180_eeprom.BMP180_MD = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MD]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MD]);
 800071e:	23be      	movs	r3, #190	@ 0xbe
 8000720:	4618      	mov	r0, r3
 8000722:	f000 f82f 	bl	8000784 <BMP180_ReadReg>
 8000726:	4603      	mov	r3, r0
 8000728:	021b      	lsls	r3, r3, #8
 800072a:	b21c      	sxth	r4, r3
 800072c:	23bf      	movs	r3, #191	@ 0xbf
 800072e:	4618      	mov	r0, r3
 8000730:	f000 f828 	bl	8000784 <BMP180_ReadReg>
 8000734:	4603      	mov	r3, r0
 8000736:	b21b      	sxth	r3, r3
 8000738:	4323      	orrs	r3, r4
 800073a:	b21a      	sxth	r2, r3
 800073c:	4b01      	ldr	r3, [pc, #4]	@ (8000744 <BMP180_UpdateCalibrationData+0x184>)
 800073e:	829a      	strh	r2, [r3, #20]
}
 8000740:	bf00      	nop
 8000742:	bd98      	pop	{r3, r4, r7, pc}
 8000744:	20000080 	.word	0x20000080

08000748 <BMP180_WriteReg>:
/**
 * @brief Writes to a specific register.
 * @param reg Address of register to write to.
 * @param cmd Byte to write.
 */
void BMP180_WriteReg(uint8_t reg, uint8_t cmd) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af02      	add	r7, sp, #8
 800074e:	4603      	mov	r3, r0
 8000750:	460a      	mov	r2, r1
 8000752:	71fb      	strb	r3, [r7, #7]
 8000754:	4613      	mov	r3, r2
 8000756:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	733b      	strb	r3, [r7, #12]
 800075c:	79bb      	ldrb	r3, [r7, #6]
 800075e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, arr, 2, BMP180_I2C_TIMEOUT);
 8000760:	4b07      	ldr	r3, [pc, #28]	@ (8000780 <BMP180_WriteReg+0x38>)
 8000762:	6818      	ldr	r0, [r3, #0]
 8000764:	f107 020c 	add.w	r2, r7, #12
 8000768:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	2302      	movs	r3, #2
 8000770:	21ee      	movs	r1, #238	@ 0xee
 8000772:	f001 fa17 	bl	8001ba4 <HAL_I2C_Master_Transmit>
}
 8000776:	bf00      	nop
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	2000007c 	.word	0x2000007c

08000784 <BMP180_ReadReg>:
/**
 * @brief Reads from a specific register.
 * @param reg Address of register to read from.
 * @return Byte read.
 */
uint8_t BMP180_ReadReg(uint8_t reg) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af02      	add	r7, sp, #8
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 800078e:	4b0d      	ldr	r3, [pc, #52]	@ (80007c4 <BMP180_ReadReg+0x40>)
 8000790:	6818      	ldr	r0, [r3, #0]
 8000792:	1dfa      	adds	r2, r7, #7
 8000794:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	2301      	movs	r3, #1
 800079c:	21ee      	movs	r1, #238	@ 0xee
 800079e:	f001 fa01 	bl	8001ba4 <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 80007a2:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <BMP180_ReadReg+0x40>)
 80007a4:	6818      	ldr	r0, [r3, #0]
 80007a6:	f107 020f 	add.w	r2, r7, #15
 80007aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	2301      	movs	r3, #1
 80007b2:	21ee      	movs	r1, #238	@ 0xee
 80007b4:	f001 faf4 	bl	8001da0 <HAL_I2C_Master_Receive>
	return result;
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	2000007c 	.word	0x2000007c

080007c8 <BMP180_GetRawTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in 0.1 (1/10) degrees Celsius.
 */
int32_t BMP180_GetRawTemperature(void) {
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 80007ce:	232e      	movs	r3, #46	@ 0x2e
 80007d0:	4619      	mov	r1, r3
 80007d2:	20f4      	movs	r0, #244	@ 0xf4
 80007d4:	f7ff ffb8 	bl	8000748 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 80007d8:	2305      	movs	r3, #5
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 fe10 	bl	8001400 <HAL_Delay>
	int32_t ut = (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 80007e0:	20f6      	movs	r0, #246	@ 0xf6
 80007e2:	f7ff ffcf 	bl	8000784 <BMP180_ReadReg>
 80007e6:	4603      	mov	r3, r0
 80007e8:	021c      	lsls	r4, r3, #8
 80007ea:	20f7      	movs	r0, #247	@ 0xf7
 80007ec:	f7ff ffca 	bl	8000784 <BMP180_ReadReg>
 80007f0:	4603      	mov	r3, r0
 80007f2:	4323      	orrs	r3, r4
 80007f4:	60fb      	str	r3, [r7, #12]
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 80007f6:	4b15      	ldr	r3, [pc, #84]	@ (800084c <BMP180_GetRawTemperature+0x84>)
 80007f8:	895b      	ldrh	r3, [r3, #10]
 80007fa:	461a      	mov	r2, r3
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	1a9b      	subs	r3, r3, r2
 8000800:	4a12      	ldr	r2, [pc, #72]	@ (800084c <BMP180_GetRawTemperature+0x84>)
 8000802:	8912      	ldrh	r2, [r2, #8]
 8000804:	fb02 f303 	mul.w	r3, r2, r3
 8000808:	2b00      	cmp	r3, #0
 800080a:	da02      	bge.n	8000812 <BMP180_GetRawTemperature+0x4a>
 800080c:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8000810:	337f      	adds	r3, #127	@ 0x7f
 8000812:	13db      	asrs	r3, r3, #15
 8000814:	60bb      	str	r3, [r7, #8]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 8000816:	4b0d      	ldr	r3, [pc, #52]	@ (800084c <BMP180_GetRawTemperature+0x84>)
 8000818:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800081c:	02da      	lsls	r2, r3, #11
 800081e:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <BMP180_GetRawTemperature+0x84>)
 8000820:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000824:	4619      	mov	r1, r3
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	440b      	add	r3, r1
 800082a:	fb92 f3f3 	sdiv	r3, r2, r3
 800082e:	607b      	str	r3, [r7, #4]
	int32_t b5 = x1 + x2;
 8000830:	68ba      	ldr	r2, [r7, #8]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4413      	add	r3, r2
 8000836:	603b      	str	r3, [r7, #0]
	return (b5 + 8) / (1 << 4);
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	3308      	adds	r3, #8
 800083c:	2b00      	cmp	r3, #0
 800083e:	da00      	bge.n	8000842 <BMP180_GetRawTemperature+0x7a>
 8000840:	330f      	adds	r3, #15
 8000842:	111b      	asrs	r3, r3, #4
}
 8000844:	4618      	mov	r0, r3
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	bd90      	pop	{r4, r7, pc}
 800084c:	20000080 	.word	0x20000080

08000850 <BMP180_GetPressure>:

/**
 * @brief Measures and calculates pressure.
 * @return Pressure in Pascal(Pa).
 */
int32_t BMP180_GetPressure(void) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b08c      	sub	sp, #48	@ 0x30
 8000854:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 8000856:	232e      	movs	r3, #46	@ 0x2e
 8000858:	4619      	mov	r1, r3
 800085a:	20f4      	movs	r0, #244	@ 0xf4
 800085c:	f7ff ff74 	bl	8000748 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 8000860:	2305      	movs	r3, #5
 8000862:	4618      	mov	r0, r3
 8000864:	f000 fdcc 	bl	8001400 <HAL_Delay>
	int32_t ut = BMP180_GetUT();
 8000868:	f000 f902 	bl	8000a70 <BMP180_GetUT>
 800086c:	62b8      	str	r0, [r7, #40]	@ 0x28
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_PRES[_bmp180_oss]);
 800086e:	4b7b      	ldr	r3, [pc, #492]	@ (8000a5c <BMP180_GetPressure+0x20c>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	461a      	mov	r2, r3
 8000874:	4b7a      	ldr	r3, [pc, #488]	@ (8000a60 <BMP180_GetPressure+0x210>)
 8000876:	5c9b      	ldrb	r3, [r3, r2]
 8000878:	4619      	mov	r1, r3
 800087a:	20f4      	movs	r0, #244	@ 0xf4
 800087c:	f7ff ff64 	bl	8000748 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_PRES[_bmp180_oss]);
 8000880:	4b76      	ldr	r3, [pc, #472]	@ (8000a5c <BMP180_GetPressure+0x20c>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	461a      	mov	r2, r3
 8000886:	4b77      	ldr	r3, [pc, #476]	@ (8000a64 <BMP180_GetPressure+0x214>)
 8000888:	5c9b      	ldrb	r3, [r3, r2]
 800088a:	4618      	mov	r0, r3
 800088c:	f000 fdb8 	bl	8001400 <HAL_Delay>
	int32_t up = BMP180_GetUP();
 8000890:	f000 f8fc 	bl	8000a8c <BMP180_GetUP>
 8000894:	6278      	str	r0, [r7, #36]	@ 0x24
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 8000896:	4b74      	ldr	r3, [pc, #464]	@ (8000a68 <BMP180_GetPressure+0x218>)
 8000898:	895b      	ldrh	r3, [r3, #10]
 800089a:	461a      	mov	r2, r3
 800089c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800089e:	1a9b      	subs	r3, r3, r2
 80008a0:	4a71      	ldr	r2, [pc, #452]	@ (8000a68 <BMP180_GetPressure+0x218>)
 80008a2:	8912      	ldrh	r2, [r2, #8]
 80008a4:	fb02 f303 	mul.w	r3, r2, r3
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	da02      	bge.n	80008b2 <BMP180_GetPressure+0x62>
 80008ac:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80008b0:	337f      	adds	r3, #127	@ 0x7f
 80008b2:	13db      	asrs	r3, r3, #15
 80008b4:	623b      	str	r3, [r7, #32]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 80008b6:	4b6c      	ldr	r3, [pc, #432]	@ (8000a68 <BMP180_GetPressure+0x218>)
 80008b8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80008bc:	02da      	lsls	r2, r3, #11
 80008be:	4b6a      	ldr	r3, [pc, #424]	@ (8000a68 <BMP180_GetPressure+0x218>)
 80008c0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80008c4:	4619      	mov	r1, r3
 80008c6:	6a3b      	ldr	r3, [r7, #32]
 80008c8:	440b      	add	r3, r1
 80008ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80008ce:	61fb      	str	r3, [r7, #28]
	int32_t b5 = x1 + x2;
 80008d0:	6a3a      	ldr	r2, [r7, #32]
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	4413      	add	r3, r2
 80008d6:	61bb      	str	r3, [r7, #24]
	int32_t b6 = b5 - 4000;
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 80008de:	617b      	str	r3, [r7, #20]
	x1 = (_bmp180_eeprom.BMP180_B2 * (b6 * b6 / (1 << 12))) / (1 << 11);
 80008e0:	4b61      	ldr	r3, [pc, #388]	@ (8000a68 <BMP180_GetPressure+0x218>)
 80008e2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80008e6:	461a      	mov	r2, r3
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	fb03 f303 	mul.w	r3, r3, r3
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	da01      	bge.n	80008f6 <BMP180_GetPressure+0xa6>
 80008f2:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80008f6:	131b      	asrs	r3, r3, #12
 80008f8:	fb02 f303 	mul.w	r3, r2, r3
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	da01      	bge.n	8000904 <BMP180_GetPressure+0xb4>
 8000900:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000904:	12db      	asrs	r3, r3, #11
 8000906:	623b      	str	r3, [r7, #32]
	x2 = _bmp180_eeprom.BMP180_AC2 * b6 / (1 << 11);
 8000908:	4b57      	ldr	r3, [pc, #348]	@ (8000a68 <BMP180_GetPressure+0x218>)
 800090a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800090e:	461a      	mov	r2, r3
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	fb02 f303 	mul.w	r3, r2, r3
 8000916:	2b00      	cmp	r3, #0
 8000918:	da01      	bge.n	800091e <BMP180_GetPressure+0xce>
 800091a:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800091e:	12db      	asrs	r3, r3, #11
 8000920:	61fb      	str	r3, [r7, #28]
	int32_t x3 = x1 + x2;
 8000922:	6a3a      	ldr	r2, [r7, #32]
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	4413      	add	r3, r2
 8000928:	613b      	str	r3, [r7, #16]
	int32_t b3 = (((_bmp180_eeprom.BMP180_AC1 * 4 + x3) << _bmp180_oss) + 2) / 4;
 800092a:	4b4f      	ldr	r3, [pc, #316]	@ (8000a68 <BMP180_GetPressure+0x218>)
 800092c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000930:	009a      	lsls	r2, r3, #2
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	4413      	add	r3, r2
 8000936:	4a49      	ldr	r2, [pc, #292]	@ (8000a5c <BMP180_GetPressure+0x20c>)
 8000938:	7812      	ldrb	r2, [r2, #0]
 800093a:	4093      	lsls	r3, r2
 800093c:	3302      	adds	r3, #2
 800093e:	2b00      	cmp	r3, #0
 8000940:	da00      	bge.n	8000944 <BMP180_GetPressure+0xf4>
 8000942:	3303      	adds	r3, #3
 8000944:	109b      	asrs	r3, r3, #2
 8000946:	60fb      	str	r3, [r7, #12]
	x1 = _bmp180_eeprom.BMP180_AC3 * b6 / (1 << 13);
 8000948:	4b47      	ldr	r3, [pc, #284]	@ (8000a68 <BMP180_GetPressure+0x218>)
 800094a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800094e:	461a      	mov	r2, r3
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	fb02 f303 	mul.w	r3, r2, r3
 8000956:	2b00      	cmp	r3, #0
 8000958:	da02      	bge.n	8000960 <BMP180_GetPressure+0x110>
 800095a:	f503 53ff 	add.w	r3, r3, #8160	@ 0x1fe0
 800095e:	331f      	adds	r3, #31
 8000960:	135b      	asrs	r3, r3, #13
 8000962:	623b      	str	r3, [r7, #32]
	x2 = (_bmp180_eeprom.BMP180_B1 * (b6 * b6 / (1 << 12))) / (1 << 16);
 8000964:	4b40      	ldr	r3, [pc, #256]	@ (8000a68 <BMP180_GetPressure+0x218>)
 8000966:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800096a:	461a      	mov	r2, r3
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	fb03 f303 	mul.w	r3, r3, r3
 8000972:	2b00      	cmp	r3, #0
 8000974:	da01      	bge.n	800097a <BMP180_GetPressure+0x12a>
 8000976:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800097a:	131b      	asrs	r3, r3, #12
 800097c:	fb02 f303 	mul.w	r3, r2, r3
 8000980:	2b00      	cmp	r3, #0
 8000982:	da02      	bge.n	800098a <BMP180_GetPressure+0x13a>
 8000984:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000988:	33ff      	adds	r3, #255	@ 0xff
 800098a:	141b      	asrs	r3, r3, #16
 800098c:	61fb      	str	r3, [r7, #28]
	x3 = ((x1 + x2) + 2) / 4;
 800098e:	6a3a      	ldr	r2, [r7, #32]
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	4413      	add	r3, r2
 8000994:	3302      	adds	r3, #2
 8000996:	2b00      	cmp	r3, #0
 8000998:	da00      	bge.n	800099c <BMP180_GetPressure+0x14c>
 800099a:	3303      	adds	r3, #3
 800099c:	109b      	asrs	r3, r3, #2
 800099e:	613b      	str	r3, [r7, #16]
	uint32_t b4 = _bmp180_eeprom.BMP180_AC4 * (uint32_t) (x3 + 32768) / (1 << 15);
 80009a0:	4b31      	ldr	r3, [pc, #196]	@ (8000a68 <BMP180_GetPressure+0x218>)
 80009a2:	88db      	ldrh	r3, [r3, #6]
 80009a4:	461a      	mov	r2, r3
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80009ac:	fb02 f303 	mul.w	r3, r2, r3
 80009b0:	0bdb      	lsrs	r3, r3, #15
 80009b2:	60bb      	str	r3, [r7, #8]
	uint32_t b7 = ((uint32_t) up - b3) * (50000 >> _bmp180_oss);
 80009b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	4a28      	ldr	r2, [pc, #160]	@ (8000a5c <BMP180_GetPressure+0x20c>)
 80009bc:	7812      	ldrb	r2, [r2, #0]
 80009be:	4611      	mov	r1, r2
 80009c0:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80009c4:	410a      	asrs	r2, r1
 80009c6:	fb02 f303 	mul.w	r3, r2, r3
 80009ca:	607b      	str	r3, [r7, #4]
	int32_t p;
	if (b7 < 0x80000000)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	db06      	blt.n	80009e0 <BMP180_GetPressure+0x190>
		p = (b7 * 2) / b4;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	005a      	lsls	r2, r3, #1
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80009de:	e005      	b.n	80009ec <BMP180_GetPressure+0x19c>
	else
		p = (b7 / b4) * 2;
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	x1 = (p / (1 << 8)) * (p / (1 << 8));
 80009ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	da00      	bge.n	80009f4 <BMP180_GetPressure+0x1a4>
 80009f2:	33ff      	adds	r3, #255	@ 0xff
 80009f4:	121b      	asrs	r3, r3, #8
 80009f6:	461a      	mov	r2, r3
 80009f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	da00      	bge.n	8000a00 <BMP180_GetPressure+0x1b0>
 80009fe:	33ff      	adds	r3, #255	@ 0xff
 8000a00:	121b      	asrs	r3, r3, #8
 8000a02:	fb02 f303 	mul.w	r3, r2, r3
 8000a06:	623b      	str	r3, [r7, #32]
	x1 = (x1 * 3038) / (1 << 16);
 8000a08:	6a3b      	ldr	r3, [r7, #32]
 8000a0a:	f640 32de 	movw	r2, #3038	@ 0xbde
 8000a0e:	fb02 f303 	mul.w	r3, r2, r3
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	da02      	bge.n	8000a1c <BMP180_GetPressure+0x1cc>
 8000a16:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000a1a:	33ff      	adds	r3, #255	@ 0xff
 8000a1c:	141b      	asrs	r3, r3, #16
 8000a1e:	623b      	str	r3, [r7, #32]
	x2 = (-7357 * p) / (1 << 16);
 8000a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a22:	4a12      	ldr	r2, [pc, #72]	@ (8000a6c <BMP180_GetPressure+0x21c>)
 8000a24:	fb02 f303 	mul.w	r3, r2, r3
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	da02      	bge.n	8000a32 <BMP180_GetPressure+0x1e2>
 8000a2c:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000a30:	33ff      	adds	r3, #255	@ 0xff
 8000a32:	141b      	asrs	r3, r3, #16
 8000a34:	61fb      	str	r3, [r7, #28]
	p = p + (x1 + x2 + 3791) / (1 << 4);
 8000a36:	6a3a      	ldr	r2, [r7, #32]
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	da00      	bge.n	8000a46 <BMP180_GetPressure+0x1f6>
 8000a44:	330f      	adds	r3, #15
 8000a46:	111b      	asrs	r3, r3, #4
 8000a48:	461a      	mov	r2, r3
 8000a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a4c:	4413      	add	r3, r2
 8000a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	return p;
 8000a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3730      	adds	r7, #48	@ 0x30
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000096 	.word	0x20000096
 8000a60:	08003a48 	.word	0x08003a48
 8000a64:	08003a4c 	.word	0x08003a4c
 8000a68:	20000080 	.word	0x20000080
 8000a6c:	ffffe343 	.word	0xffffe343

08000a70 <BMP180_GetUT>:

int32_t BMP180_GetUT(void){
 8000a70:	b598      	push	{r3, r4, r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	return (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 8000a74:	20f6      	movs	r0, #246	@ 0xf6
 8000a76:	f7ff fe85 	bl	8000784 <BMP180_ReadReg>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	021c      	lsls	r4, r3, #8
 8000a7e:	20f7      	movs	r0, #247	@ 0xf7
 8000a80:	f7ff fe80 	bl	8000784 <BMP180_ReadReg>
 8000a84:	4603      	mov	r3, r0
 8000a86:	4323      	orrs	r3, r4
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	bd98      	pop	{r3, r4, r7, pc}

08000a8c <BMP180_GetUP>:

int32_t BMP180_GetUP(void){
 8000a8c:	b598      	push	{r3, r4, r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	return ((BMP180_ReadReg(BMP180_MSB_REG) << 16) | (BMP180_ReadReg(BMP180_LSB_REG) << 8) | BMP180_ReadReg(BMP180_XLSB_REG)) >> (8 - _bmp180_oss);
 8000a90:	20f6      	movs	r0, #246	@ 0xf6
 8000a92:	f7ff fe77 	bl	8000784 <BMP180_ReadReg>
 8000a96:	4603      	mov	r3, r0
 8000a98:	041c      	lsls	r4, r3, #16
 8000a9a:	20f7      	movs	r0, #247	@ 0xf7
 8000a9c:	f7ff fe72 	bl	8000784 <BMP180_ReadReg>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	021b      	lsls	r3, r3, #8
 8000aa4:	431c      	orrs	r4, r3
 8000aa6:	20f8      	movs	r0, #248	@ 0xf8
 8000aa8:	f7ff fe6c 	bl	8000784 <BMP180_ReadReg>
 8000aac:	4603      	mov	r3, r0
 8000aae:	ea44 0203 	orr.w	r2, r4, r3
 8000ab2:	4b04      	ldr	r3, [pc, #16]	@ (8000ac4 <BMP180_GetUP+0x38>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	f1c3 0308 	rsb	r3, r3, #8
 8000aba:	fa42 f303 	asr.w	r3, r2, r3
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	bd98      	pop	{r3, r4, r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000096 	.word	0x20000096

08000ac8 <lcd1602_Send_init_Data>:

/*============================Вспомогательные функции============================*/
/*-------------Функция для отправки данных при инициализации дисплея-------------*/
/// Функция предназначена для отправки байта данных по шине i2c. Содержит в себе Delay. Без него инициализация дисплея не проходит.
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_init_Data(uint8_t *init_Data) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af02      	add	r7, sp, #8
 8000ace:	6078      	str	r0, [r7, #4]
	if (backlight) {
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b48 <lcd1602_Send_init_Data+0x80>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d007      	beq.n	8000ae8 <lcd1602_Send_init_Data+0x20>
		*init_Data |= 0x08; //Включить подсветку
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	f043 0308 	orr.w	r3, r3, #8
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	701a      	strb	r2, [r3, #0]
 8000ae6:	e006      	b.n	8000af6 <lcd1602_Send_init_Data+0x2e>
	} else {
		*init_Data &= ~0x08; //Выключить подсветку
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	f023 0308 	bic.w	r3, r3, #8
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	701a      	strb	r2, [r3, #0]
	}
	*init_Data |= 0x04; // Устанавливаем стробирующий сигнал E в 1
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	f043 0304 	orr.w	r3, r3, #4
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, Adress, init_Data, 1, 10);
 8000b04:	230a      	movs	r3, #10
 8000b06:	9300      	str	r3, [sp, #0]
 8000b08:	2301      	movs	r3, #1
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	214e      	movs	r1, #78	@ 0x4e
 8000b0e:	480f      	ldr	r0, [pc, #60]	@ (8000b4c <lcd1602_Send_init_Data+0x84>)
 8000b10:	f001 f848 	bl	8001ba4 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000b14:	2005      	movs	r0, #5
 8000b16:	f000 fc73 	bl	8001400 <HAL_Delay>
	*init_Data &= ~0x04; // Устанавливаем стробирующий сигнал E в 0
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	f023 0304 	bic.w	r3, r3, #4
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, Adress, init_Data, 1, 10);
 8000b28:	230a      	movs	r3, #10
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	214e      	movs	r1, #78	@ 0x4e
 8000b32:	4806      	ldr	r0, [pc, #24]	@ (8000b4c <lcd1602_Send_init_Data+0x84>)
 8000b34:	f001 f836 	bl	8001ba4 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000b38:	2005      	movs	r0, #5
 8000b3a:	f000 fc61 	bl	8001400 <HAL_Delay>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000000 	.word	0x20000000
 8000b4c:	200000ec 	.word	0x200000ec

08000b50 <lcd1602_Send_data>:
/*----------------------Функция отправки байта данных----------------------------*/

/*----------------------Основная функция для отправки данных---------------------*/
/// Функция предназначена для отправки байта данных по шине i2c
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_data(uint8_t *Data) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af02      	add	r7, sp, #8
 8000b56:	6078      	str	r0, [r7, #4]

	if (backlight) {
 8000b58:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc4 <lcd1602_Send_data+0x74>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d007      	beq.n	8000b70 <lcd1602_Send_data+0x20>
		*Data |= 0x08;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	f043 0308 	orr.w	r3, r3, #8
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	701a      	strb	r2, [r3, #0]
 8000b6e:	e006      	b.n	8000b7e <lcd1602_Send_data+0x2e>
	} else {
		*Data &= ~0x08;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	f023 0308 	bic.w	r3, r3, #8
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	701a      	strb	r2, [r3, #0]
	}
	*Data |= 0x04; // устанавливаем стробирующий сигнал E в 1
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	f043 0304 	orr.w	r3, r3, #4
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, Adress, Data, 1, 10);
 8000b8c:	230a      	movs	r3, #10
 8000b8e:	9300      	str	r3, [sp, #0]
 8000b90:	2301      	movs	r3, #1
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	214e      	movs	r1, #78	@ 0x4e
 8000b96:	480c      	ldr	r0, [pc, #48]	@ (8000bc8 <lcd1602_Send_data+0x78>)
 8000b98:	f001 f804 	bl	8001ba4 <HAL_I2C_Master_Transmit>
	*Data &= ~0x04; // устанавливаем стробирующий сигнал E в 0
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	f023 0304 	bic.w	r3, r3, #4
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, Adress, Data, 1, 10);
 8000baa:	230a      	movs	r3, #10
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	2301      	movs	r3, #1
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	214e      	movs	r1, #78	@ 0x4e
 8000bb4:	4804      	ldr	r0, [pc, #16]	@ (8000bc8 <lcd1602_Send_data+0x78>)
 8000bb6:	f000 fff5 	bl	8001ba4 <HAL_I2C_Master_Transmit>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	200000ec 	.word	0x200000ec

08000bcc <lcd1602_Init>:
/*----------------------Основная функция для отправки данных---------------------*/
/*============================Вспомогательные функции============================*/

/*-------------------------Функция инициализации дисплея-------------------------*/
/// Функция инициализации дисплея
void lcd1602_Init(void) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
	/*========Power on========*/
	uint8_t tx_buffer = 0x30;
 8000bd2:	2330      	movs	r3, #48	@ 0x30
 8000bd4:	71fb      	strb	r3, [r7, #7]
	/*========Wait for more than 15 ms after Vcc rises to 4.5V========*/
	HAL_Delay(15);
 8000bd6:	200f      	movs	r0, #15
 8000bd8:	f000 fc12 	bl	8001400 <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8000bdc:	1dfb      	adds	r3, r7, #7
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff ff72 	bl	8000ac8 <lcd1602_Send_init_Data>
	/*========Wait for more 4.1 ms========*/
	HAL_Delay(5);
 8000be4:	2005      	movs	r0, #5
 8000be6:	f000 fc0b 	bl	8001400 <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff6b 	bl	8000ac8 <lcd1602_Send_init_Data>
	/*========Wait for more 100 microsec========*/
	HAL_Delay(1);
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f000 fc04 	bl	8001400 <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8000bf8:	1dfb      	adds	r3, r7, #7
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff ff64 	bl	8000ac8 <lcd1602_Send_init_Data>

	/*========Включаем 4х-битный интерфейс========*/
	tx_buffer = 0x20;
 8000c00:	2320      	movs	r3, #32
 8000c02:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000c04:	1dfb      	adds	r3, r7, #7
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ff5e 	bl	8000ac8 <lcd1602_Send_init_Data>
	/*========Включаем 4х-битный интерфейс========*/

	/*======2 строки, шрифт 5х8======*/
	tx_buffer = 0x20;
 8000c0c:	2320      	movs	r3, #32
 8000c0e:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000c10:	1dfb      	adds	r3, r7, #7
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ff58 	bl	8000ac8 <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 8000c18:	2380      	movs	r3, #128	@ 0x80
 8000c1a:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000c1c:	1dfb      	adds	r3, r7, #7
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ff52 	bl	8000ac8 <lcd1602_Send_init_Data>
	/*======2 строки, шрифт 5х8======*/

	/*========Выключить дисплей========*/
	tx_buffer = 0x00;
 8000c24:	2300      	movs	r3, #0
 8000c26:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000c28:	1dfb      	adds	r3, r7, #7
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff ff4c 	bl	8000ac8 <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 8000c30:	2380      	movs	r3, #128	@ 0x80
 8000c32:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000c34:	1dfb      	adds	r3, r7, #7
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ff46 	bl	8000ac8 <lcd1602_Send_init_Data>
	/*========Выключить дисплей========*/

	/*========Очистить дисплей========*/
	tx_buffer = 0x00;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000c40:	1dfb      	adds	r3, r7, #7
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff ff40 	bl	8000ac8 <lcd1602_Send_init_Data>
	tx_buffer = 0x10;
 8000c48:	2310      	movs	r3, #16
 8000c4a:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000c4c:	1dfb      	adds	r3, r7, #7
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff ff3a 	bl	8000ac8 <lcd1602_Send_init_Data>
	/*========Очистить дисплей========*/

	/*========Режим сдвига курсора========*/
	tx_buffer = 0x00;
 8000c54:	2300      	movs	r3, #0
 8000c56:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000c58:	1dfb      	adds	r3, r7, #7
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ff34 	bl	8000ac8 <lcd1602_Send_init_Data>
	tx_buffer = 0x30;
 8000c60:	2330      	movs	r3, #48	@ 0x30
 8000c62:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000c64:	1dfb      	adds	r3, r7, #7
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff ff2e 	bl	8000ac8 <lcd1602_Send_init_Data>
	/*========Режим сдвига курсора========*/

	/*========Инициализация завершена. Включить дисплей========*/
	tx_buffer = 0x00;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000c70:	1dfb      	adds	r3, r7, #7
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ff28 	bl	8000ac8 <lcd1602_Send_init_Data>
	tx_buffer = 0xC0;
 8000c78:	23c0      	movs	r3, #192	@ 0xc0
 8000c7a:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000c7c:	1dfb      	adds	r3, r7, #7
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ff22 	bl	8000ac8 <lcd1602_Send_init_Data>
	/*========Инициализация завершена. Включить дисплей========*/
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <lcd1602_Print_symbol>:
/*-------------------------Функция инициализации дисплея-------------------------*/

/*-------------------------Функция вывода символа на дисплей---------------------*/
/// Функция вывода символа на дисплей
/// \param* symbol - символ в кодировке utf-8
void lcd1602_Print_symbol(uint8_t symbol) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
	uint8_t command;
	command = ((symbol & 0xf0) | 0x09); //Формирование верхнего полубайта в команду для дисплея
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	f023 030f 	bic.w	r3, r3, #15
 8000c9e:	b25b      	sxtb	r3, r3
 8000ca0:	f043 0309 	orr.w	r3, r3, #9
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 8000caa:	f107 030f 	add.w	r3, r7, #15
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff4e 	bl	8000b50 <lcd1602_Send_data>
	command = ((symbol & 0x0f) << 4) | 0x09; //Формирование нижнего полубайта в команду для дисплея
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	011b      	lsls	r3, r3, #4
 8000cb8:	b25b      	sxtb	r3, r3
 8000cba:	f043 0309 	orr.w	r3, r3, #9
 8000cbe:	b25b      	sxtb	r3, r3
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 8000cc4:	f107 030f 	add.w	r3, r7, #15
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff41 	bl	8000b50 <lcd1602_Send_data>
}
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <lcd1602_Print_text>:

/*-------------------------Функция вывода текста на дисплей----------------------*/
/// Функция вывода символа на дисплей
/// \param *message - массив, который отправляем на дисплей.
/// Максимальная длина сообщения - 40 символов.
void lcd1602_Print_text(char *message) {
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b084      	sub	sp, #16
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen(message); i++) {
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	e009      	b.n	8000cf8 <lcd1602_Print_text+0x22>
		lcd1602_Print_symbol(message[i]);
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ffcd 	bl	8000c8c <lcd1602_Print_symbol>
	for (int i = 0; i < strlen(message); i++) {
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff fa71 	bl	80001e0 <strlen>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d8ee      	bhi.n	8000ce4 <lcd1602_Print_text+0xe>
	}
}
 8000d06:	bf00      	nop
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <lcd1602_SetCursor>:
/// \param x - координата по оси x. от 0 до 39.
/// \param y - координата по оси y. от 0 до 3.
/// Видимая область:
/// Для дисплеев 1602 max x = 15, max y = 1.
/// Для дисплеев 2004 max x = 19, max y = 3.
void lcd1602_SetCursor(uint8_t x, uint8_t y) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	460a      	mov	r2, r1
 8000d1a:	71fb      	strb	r3, [r7, #7]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	71bb      	strb	r3, [r7, #6]
	uint8_t command, adr;
	if (y > 3)
 8000d20:	79bb      	ldrb	r3, [r7, #6]
 8000d22:	2b03      	cmp	r3, #3
 8000d24:	d901      	bls.n	8000d2a <lcd1602_SetCursor+0x1a>
		y = 3;
 8000d26:	2303      	movs	r3, #3
 8000d28:	71bb      	strb	r3, [r7, #6]
	if (x > 39)
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	2b27      	cmp	r3, #39	@ 0x27
 8000d2e:	d901      	bls.n	8000d34 <lcd1602_SetCursor+0x24>
		x = 39;
 8000d30:	2327      	movs	r3, #39	@ 0x27
 8000d32:	71fb      	strb	r3, [r7, #7]
	if (y == 0) {
 8000d34:	79bb      	ldrb	r3, [r7, #6]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d101      	bne.n	8000d3e <lcd1602_SetCursor+0x2e>
		adr = x;
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 1) {
 8000d3e:	79bb      	ldrb	r3, [r7, #6]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d102      	bne.n	8000d4a <lcd1602_SetCursor+0x3a>
		adr = x + 0x40;
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	3340      	adds	r3, #64	@ 0x40
 8000d48:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 2) {
 8000d4a:	79bb      	ldrb	r3, [r7, #6]
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d102      	bne.n	8000d56 <lcd1602_SetCursor+0x46>
		adr = x + 0x14;
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	3314      	adds	r3, #20
 8000d54:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 3) {
 8000d56:	79bb      	ldrb	r3, [r7, #6]
 8000d58:	2b03      	cmp	r3, #3
 8000d5a:	d102      	bne.n	8000d62 <lcd1602_SetCursor+0x52>
		adr = x + 0x54;
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	3354      	adds	r3, #84	@ 0x54
 8000d60:	73fb      	strb	r3, [r7, #15]
	}
	command = ((adr & 0xf0) | 0x80);
 8000d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d70:	b25b      	sxtb	r3, r3
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 8000d76:	f107 030e 	add.w	r3, r7, #14
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fee8 	bl	8000b50 <lcd1602_Send_data>

	command = (adr << 4);
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	011b      	lsls	r3, r3, #4
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 8000d88:	f107 030e 	add.w	r3, r7, #14
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fedf 	bl	8000b50 <lcd1602_Send_data>

}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <lcd1602_Clean>:
}
/*---------------------Функция создания своего символа-------------------------- */

/*-------------------------Функция очистки дисплея-------------------------------*/

void lcd1602_Clean(void) {
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
/// Аппаратная функция очистки дисплея.
/// Удаляет весь текст, возвращает курсор в начальное положение.
	uint8_t tx_buffer = 0x00;
 8000da0:	2300      	movs	r3, #0
 8000da2:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000da4:	1dfb      	adds	r3, r7, #7
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fe8e 	bl	8000ac8 <lcd1602_Send_init_Data>
	tx_buffer = 0x10;
 8000dac:	2310      	movs	r3, #16
 8000dae:	71fb      	strb	r3, [r7, #7]
	lcd1602_Send_init_Data(&tx_buffer);
 8000db0:	1dfb      	adds	r3, r7, #7
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fe88 	bl	8000ac8 <lcd1602_Send_init_Data>

}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b09d      	sub	sp, #116	@ 0x74
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc6:	f000 faa9 	bl	800131c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dca:	f000 f85b 	bl	8000e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dce:	f000 f91f 	bl	8001010 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dd2:	f000 f8c1 	bl	8000f58 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000dd6:	f000 f8ed 	bl	8000fb4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8000dda:	2064      	movs	r0, #100	@ 0x64
 8000ddc:	f000 fb10 	bl	8001400 <HAL_Delay>
  lcd1602_Init();// инициализация дисплея
 8000de0:	f7ff fef4 	bl	8000bcc <lcd1602_Init>
  BMP180_Init(&hi2c1);
 8000de4:	4823      	ldr	r0, [pc, #140]	@ (8000e74 <main+0xb4>)
 8000de6:	f7ff fbcb 	bl	8000580 <BMP180_Init>
  BMP180_SetOversampling(BMP180_ULTRA);
 8000dea:	2003      	movs	r0, #3
 8000dec:	f7ff fbd8 	bl	80005a0 <BMP180_SetOversampling>
  BMP180_UpdateCalibrationData();
 8000df0:	f7ff fbe6 	bl	80005c0 <BMP180_UpdateCalibrationData>
  lcd1602_Clean();// предварительная очистка памяти дисплея
 8000df4:	f7ff ffd1 	bl	8000d9a <lcd1602_Clean>
  lcd1602_SetCursor(1, 0);// установка курсора
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f7ff ff88 	bl	8000d10 <lcd1602_SetCursor>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		/* Reads temperature. */
		int32_t temperature = BMP180_GetRawTemperature();
 8000e00:	f7ff fce2 	bl	80007c8 <BMP180_GetRawTemperature>
 8000e04:	66f8      	str	r0, [r7, #108]	@ 0x6c
		/* If you want a floating point number instead, you can call: */
		//float temperature = BMP180_GetTemperature();
		/* Reads pressure. */
		//char buffer[25];
		int32_t pressure = BMP180_GetPressure();
 8000e06:	f7ff fd23 	bl	8000850 <BMP180_GetPressure>
 8000e0a:	66b8      	str	r0, [r7, #104]	@ 0x68
		char buffer[100];
		sprintf(buffer, "Temp: %d.%d deg", (int) temperature / 10, (int) temperature % 10);
 8000e0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e0e:	4a1a      	ldr	r2, [pc, #104]	@ (8000e78 <main+0xb8>)
 8000e10:	fb82 1203 	smull	r1, r2, r2, r3
 8000e14:	1092      	asrs	r2, r2, #2
 8000e16:	17db      	asrs	r3, r3, #31
 8000e18:	1ad4      	subs	r4, r2, r3
 8000e1a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000e1c:	4b16      	ldr	r3, [pc, #88]	@ (8000e78 <main+0xb8>)
 8000e1e:	fb83 1302 	smull	r1, r3, r3, r2
 8000e22:	1099      	asrs	r1, r3, #2
 8000e24:	17d3      	asrs	r3, r2, #31
 8000e26:	1ac9      	subs	r1, r1, r3
 8000e28:	460b      	mov	r3, r1
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	1ad1      	subs	r1, r2, r3
 8000e32:	1d38      	adds	r0, r7, #4
 8000e34:	460b      	mov	r3, r1
 8000e36:	4622      	mov	r2, r4
 8000e38:	4910      	ldr	r1, [pc, #64]	@ (8000e7c <main+0xbc>)
 8000e3a:	f002 f949 	bl	80030d0 <siprintf>
		//sprintf(buffer, "Temp: %d.%d deg", (int) temperature / 10, (int) temperature % 10);
        lcd1602_Print_text(buffer);
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff48 	bl	8000cd6 <lcd1602_Print_text>
        lcd1602_SetCursor(0, 1);
 8000e46:	2101      	movs	r1, #1
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f7ff ff61 	bl	8000d10 <lcd1602_SetCursor>
		sprintf(buffer, "Pressure: %d Pa",(int) pressure);
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000e52:	490b      	ldr	r1, [pc, #44]	@ (8000e80 <main+0xc0>)
 8000e54:	4618      	mov	r0, r3
 8000e56:	f002 f93b 	bl	80030d0 <siprintf>
        lcd1602_Print_text(buffer);
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff3a 	bl	8000cd6 <lcd1602_Print_text>
  	    HAL_Delay(300);
 8000e62:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000e66:	f000 facb 	bl	8001400 <HAL_Delay>
  	    lcd1602_Clean();// очистка дисплея
 8000e6a:	f7ff ff96 	bl	8000d9a <lcd1602_Clean>
  {
 8000e6e:	bf00      	nop
 8000e70:	e7c6      	b.n	8000e00 <main+0x40>
 8000e72:	bf00      	nop
 8000e74:	20000098 	.word	0x20000098
 8000e78:	66666667 	.word	0x66666667
 8000e7c:	08003a28 	.word	0x08003a28
 8000e80:	08003a38 	.word	0x08003a38

08000e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b094      	sub	sp, #80	@ 0x50
 8000e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8a:	f107 0320 	add.w	r3, r7, #32
 8000e8e:	2230      	movs	r2, #48	@ 0x30
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f002 f93c 	bl	8003110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	4b28      	ldr	r3, [pc, #160]	@ (8000f50 <SystemClock_Config+0xcc>)
 8000eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb0:	4a27      	ldr	r2, [pc, #156]	@ (8000f50 <SystemClock_Config+0xcc>)
 8000eb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb8:	4b25      	ldr	r3, [pc, #148]	@ (8000f50 <SystemClock_Config+0xcc>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	4b22      	ldr	r3, [pc, #136]	@ (8000f54 <SystemClock_Config+0xd0>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ed0:	4a20      	ldr	r2, [pc, #128]	@ (8000f54 <SystemClock_Config+0xd0>)
 8000ed2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f54 <SystemClock_Config+0xd0>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eec:	2310      	movs	r3, #16
 8000eee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ef8:	2308      	movs	r3, #8
 8000efa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000efc:	2354      	movs	r3, #84	@ 0x54
 8000efe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f00:	2302      	movs	r3, #2
 8000f02:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f04:	2304      	movs	r3, #4
 8000f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f08:	f107 0320 	add.w	r3, r7, #32
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f001 fc9b 	bl	8002848 <HAL_RCC_OscConfig>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f18:	f000 f8a2 	bl	8001060 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f1c:	230f      	movs	r3, #15
 8000f1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f20:	2302      	movs	r3, #2
 8000f22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f32:	f107 030c 	add.w	r3, r7, #12
 8000f36:	2102      	movs	r1, #2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f001 fefd 	bl	8002d38 <HAL_RCC_ClockConfig>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f44:	f000 f88c 	bl	8001060 <Error_Handler>
  }
}
 8000f48:	bf00      	nop
 8000f4a:	3750      	adds	r7, #80	@ 0x50
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40007000 	.word	0x40007000

08000f58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f5c:	4b12      	ldr	r3, [pc, #72]	@ (8000fa8 <MX_I2C1_Init+0x50>)
 8000f5e:	4a13      	ldr	r2, [pc, #76]	@ (8000fac <MX_I2C1_Init+0x54>)
 8000f60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f62:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <MX_I2C1_Init+0x50>)
 8000f64:	4a12      	ldr	r2, [pc, #72]	@ (8000fb0 <MX_I2C1_Init+0x58>)
 8000f66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <MX_I2C1_Init+0x50>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <MX_I2C1_Init+0x50>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa8 <MX_I2C1_Init+0x50>)
 8000f76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <MX_I2C1_Init+0x50>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f82:	4b09      	ldr	r3, [pc, #36]	@ (8000fa8 <MX_I2C1_Init+0x50>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f88:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <MX_I2C1_Init+0x50>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f8e:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <MX_I2C1_Init+0x50>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f94:	4804      	ldr	r0, [pc, #16]	@ (8000fa8 <MX_I2C1_Init+0x50>)
 8000f96:	f000 fcc1 	bl	800191c <HAL_I2C_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fa0:	f000 f85e 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000098 	.word	0x20000098
 8000fac:	40005400 	.word	0x40005400
 8000fb0:	000186a0 	.word	0x000186a0

08000fb4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <MX_I2C2_Init+0x50>)
 8000fba:	4a13      	ldr	r2, [pc, #76]	@ (8001008 <MX_I2C2_Init+0x54>)
 8000fbc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <MX_I2C2_Init+0x50>)
 8000fc0:	4a12      	ldr	r2, [pc, #72]	@ (800100c <MX_I2C2_Init+0x58>)
 8000fc2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <MX_I2C2_Init+0x50>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <MX_I2C2_Init+0x50>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <MX_I2C2_Init+0x50>)
 8000fd2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fd6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001004 <MX_I2C2_Init+0x50>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000fde:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <MX_I2C2_Init+0x50>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fe4:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <MX_I2C2_Init+0x50>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fea:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <MX_I2C2_Init+0x50>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ff0:	4804      	ldr	r0, [pc, #16]	@ (8001004 <MX_I2C2_Init+0x50>)
 8000ff2:	f000 fc93 	bl	800191c <HAL_I2C_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ffc:	f000 f830 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200000ec 	.word	0x200000ec
 8001008:	40005800 	.word	0x40005800
 800100c:	000186a0 	.word	0x000186a0

08001010 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	4b10      	ldr	r3, [pc, #64]	@ (800105c <MX_GPIO_Init+0x4c>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	4a0f      	ldr	r2, [pc, #60]	@ (800105c <MX_GPIO_Init+0x4c>)
 8001020:	f043 0302 	orr.w	r3, r3, #2
 8001024:	6313      	str	r3, [r2, #48]	@ 0x30
 8001026:	4b0d      	ldr	r3, [pc, #52]	@ (800105c <MX_GPIO_Init+0x4c>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	603b      	str	r3, [r7, #0]
 8001036:	4b09      	ldr	r3, [pc, #36]	@ (800105c <MX_GPIO_Init+0x4c>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	4a08      	ldr	r2, [pc, #32]	@ (800105c <MX_GPIO_Init+0x4c>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6313      	str	r3, [r2, #48]	@ 0x30
 8001042:	4b06      	ldr	r3, [pc, #24]	@ (800105c <MX_GPIO_Init+0x4c>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	683b      	ldr	r3, [r7, #0]

}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40023800 	.word	0x40023800

08001060 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001064:	b672      	cpsid	i
}
 8001066:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <Error_Handler+0x8>

0800106c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	4b10      	ldr	r3, [pc, #64]	@ (80010b8 <HAL_MspInit+0x4c>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107a:	4a0f      	ldr	r2, [pc, #60]	@ (80010b8 <HAL_MspInit+0x4c>)
 800107c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001080:	6453      	str	r3, [r2, #68]	@ 0x44
 8001082:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <HAL_MspInit+0x4c>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001086:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <HAL_MspInit+0x4c>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001096:	4a08      	ldr	r2, [pc, #32]	@ (80010b8 <HAL_MspInit+0x4c>)
 8001098:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800109c:	6413      	str	r3, [r2, #64]	@ 0x40
 800109e:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <HAL_MspInit+0x4c>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800

080010bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08c      	sub	sp, #48	@ 0x30
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a3b      	ldr	r2, [pc, #236]	@ (80011c8 <HAL_I2C_MspInit+0x10c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d12d      	bne.n	800113a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
 80010e2:	4b3a      	ldr	r3, [pc, #232]	@ (80011cc <HAL_I2C_MspInit+0x110>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	4a39      	ldr	r2, [pc, #228]	@ (80011cc <HAL_I2C_MspInit+0x110>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ee:	4b37      	ldr	r3, [pc, #220]	@ (80011cc <HAL_I2C_MspInit+0x110>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	61bb      	str	r3, [r7, #24]
 80010f8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010fa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001100:	2312      	movs	r3, #18
 8001102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001108:	2303      	movs	r3, #3
 800110a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800110c:	2304      	movs	r3, #4
 800110e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	4619      	mov	r1, r3
 8001116:	482e      	ldr	r0, [pc, #184]	@ (80011d0 <HAL_I2C_MspInit+0x114>)
 8001118:	f000 fa7c 	bl	8001614 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	4b2a      	ldr	r3, [pc, #168]	@ (80011cc <HAL_I2C_MspInit+0x110>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001124:	4a29      	ldr	r2, [pc, #164]	@ (80011cc <HAL_I2C_MspInit+0x110>)
 8001126:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800112a:	6413      	str	r3, [r2, #64]	@ 0x40
 800112c:	4b27      	ldr	r3, [pc, #156]	@ (80011cc <HAL_I2C_MspInit+0x110>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001130:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001138:	e041      	b.n	80011be <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a25      	ldr	r2, [pc, #148]	@ (80011d4 <HAL_I2C_MspInit+0x118>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d13c      	bne.n	80011be <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	4b20      	ldr	r3, [pc, #128]	@ (80011cc <HAL_I2C_MspInit+0x110>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114c:	4a1f      	ldr	r2, [pc, #124]	@ (80011cc <HAL_I2C_MspInit+0x110>)
 800114e:	f043 0302 	orr.w	r3, r3, #2
 8001152:	6313      	str	r3, [r2, #48]	@ 0x30
 8001154:	4b1d      	ldr	r3, [pc, #116]	@ (80011cc <HAL_I2C_MspInit+0x110>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001160:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001166:	2312      	movs	r3, #18
 8001168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116e:	2303      	movs	r3, #3
 8001170:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001172:	2304      	movs	r3, #4
 8001174:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	4619      	mov	r1, r3
 800117c:	4814      	ldr	r0, [pc, #80]	@ (80011d0 <HAL_I2C_MspInit+0x114>)
 800117e:	f000 fa49 	bl	8001614 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001182:	2308      	movs	r3, #8
 8001184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001186:	2312      	movs	r3, #18
 8001188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001192:	2309      	movs	r3, #9
 8001194:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	4619      	mov	r1, r3
 800119c:	480c      	ldr	r0, [pc, #48]	@ (80011d0 <HAL_I2C_MspInit+0x114>)
 800119e:	f000 fa39 	bl	8001614 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <HAL_I2C_MspInit+0x110>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011aa:	4a08      	ldr	r2, [pc, #32]	@ (80011cc <HAL_I2C_MspInit+0x110>)
 80011ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b2:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <HAL_I2C_MspInit+0x110>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
}
 80011be:	bf00      	nop
 80011c0:	3730      	adds	r7, #48	@ 0x30
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40005400 	.word	0x40005400
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020400 	.word	0x40020400
 80011d4:	40005800 	.word	0x40005800

080011d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <NMI_Handler+0x4>

080011e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <HardFault_Handler+0x4>

080011e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <MemManage_Handler+0x4>

080011f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <BusFault_Handler+0x4>

080011f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <UsageFault_Handler+0x4>

08001200 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800122e:	f000 f8c7 	bl	80013c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001240:	4a14      	ldr	r2, [pc, #80]	@ (8001294 <_sbrk+0x5c>)
 8001242:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <_sbrk+0x60>)
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800124c:	4b13      	ldr	r3, [pc, #76]	@ (800129c <_sbrk+0x64>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d102      	bne.n	800125a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001254:	4b11      	ldr	r3, [pc, #68]	@ (800129c <_sbrk+0x64>)
 8001256:	4a12      	ldr	r2, [pc, #72]	@ (80012a0 <_sbrk+0x68>)
 8001258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800125a:	4b10      	ldr	r3, [pc, #64]	@ (800129c <_sbrk+0x64>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	429a      	cmp	r2, r3
 8001266:	d207      	bcs.n	8001278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001268:	f001 ff5a 	bl	8003120 <__errno>
 800126c:	4603      	mov	r3, r0
 800126e:	220c      	movs	r2, #12
 8001270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
 8001276:	e009      	b.n	800128c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001278:	4b08      	ldr	r3, [pc, #32]	@ (800129c <_sbrk+0x64>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800127e:	4b07      	ldr	r3, [pc, #28]	@ (800129c <_sbrk+0x64>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	4a05      	ldr	r2, [pc, #20]	@ (800129c <_sbrk+0x64>)
 8001288:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800128a:	68fb      	ldr	r3, [r7, #12]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20010000 	.word	0x20010000
 8001298:	00000400 	.word	0x00000400
 800129c:	20000140 	.word	0x20000140
 80012a0:	20000290 	.word	0x20000290

080012a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012a8:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <SystemInit+0x20>)
 80012aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012ae:	4a05      	ldr	r2, [pc, #20]	@ (80012c4 <SystemInit+0x20>)
 80012b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001300 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012cc:	480d      	ldr	r0, [pc, #52]	@ (8001304 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012ce:	490e      	ldr	r1, [pc, #56]	@ (8001308 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012d0:	4a0e      	ldr	r2, [pc, #56]	@ (800130c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d4:	e002      	b.n	80012dc <LoopCopyDataInit>

080012d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012da:	3304      	adds	r3, #4

080012dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e0:	d3f9      	bcc.n	80012d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001310 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012e4:	4c0b      	ldr	r4, [pc, #44]	@ (8001314 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e8:	e001      	b.n	80012ee <LoopFillZerobss>

080012ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ec:	3204      	adds	r2, #4

080012ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f0:	d3fb      	bcc.n	80012ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012f2:	f7ff ffd7 	bl	80012a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012f6:	f001 ff19 	bl	800312c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012fa:	f7ff fd61 	bl	8000dc0 <main>
  bx  lr    
 80012fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001300:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001308:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800130c:	08003aac 	.word	0x08003aac
  ldr r2, =_sbss
 8001310:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001314:	20000290 	.word	0x20000290

08001318 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001318:	e7fe      	b.n	8001318 <ADC_IRQHandler>
	...

0800131c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001320:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <HAL_Init+0x40>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a0d      	ldr	r2, [pc, #52]	@ (800135c <HAL_Init+0x40>)
 8001326:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800132a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800132c:	4b0b      	ldr	r3, [pc, #44]	@ (800135c <HAL_Init+0x40>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a0a      	ldr	r2, [pc, #40]	@ (800135c <HAL_Init+0x40>)
 8001332:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001336:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001338:	4b08      	ldr	r3, [pc, #32]	@ (800135c <HAL_Init+0x40>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a07      	ldr	r2, [pc, #28]	@ (800135c <HAL_Init+0x40>)
 800133e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001342:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001344:	2003      	movs	r0, #3
 8001346:	f000 f931 	bl	80015ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800134a:	200f      	movs	r0, #15
 800134c:	f000 f808 	bl	8001360 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001350:	f7ff fe8c 	bl	800106c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40023c00 	.word	0x40023c00

08001360 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001368:	4b12      	ldr	r3, [pc, #72]	@ (80013b4 <HAL_InitTick+0x54>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b12      	ldr	r3, [pc, #72]	@ (80013b8 <HAL_InitTick+0x58>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	4619      	mov	r1, r3
 8001372:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001376:	fbb3 f3f1 	udiv	r3, r3, r1
 800137a:	fbb2 f3f3 	udiv	r3, r2, r3
 800137e:	4618      	mov	r0, r3
 8001380:	f000 f93b 	bl	80015fa <HAL_SYSTICK_Config>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e00e      	b.n	80013ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b0f      	cmp	r3, #15
 8001392:	d80a      	bhi.n	80013aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001394:	2200      	movs	r2, #0
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	f04f 30ff 	mov.w	r0, #4294967295
 800139c:	f000 f911 	bl	80015c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a0:	4a06      	ldr	r2, [pc, #24]	@ (80013bc <HAL_InitTick+0x5c>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
 80013a8:	e000      	b.n	80013ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000004 	.word	0x20000004
 80013b8:	2000000c 	.word	0x2000000c
 80013bc:	20000008 	.word	0x20000008

080013c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c4:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <HAL_IncTick+0x20>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <HAL_IncTick+0x24>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4413      	add	r3, r2
 80013d0:	4a04      	ldr	r2, [pc, #16]	@ (80013e4 <HAL_IncTick+0x24>)
 80013d2:	6013      	str	r3, [r2, #0]
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	2000000c 	.word	0x2000000c
 80013e4:	20000144 	.word	0x20000144

080013e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return uwTick;
 80013ec:	4b03      	ldr	r3, [pc, #12]	@ (80013fc <HAL_GetTick+0x14>)
 80013ee:	681b      	ldr	r3, [r3, #0]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	20000144 	.word	0x20000144

08001400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001408:	f7ff ffee 	bl	80013e8 <HAL_GetTick>
 800140c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001418:	d005      	beq.n	8001426 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800141a:	4b0a      	ldr	r3, [pc, #40]	@ (8001444 <HAL_Delay+0x44>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4413      	add	r3, r2
 8001424:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001426:	bf00      	nop
 8001428:	f7ff ffde 	bl	80013e8 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	429a      	cmp	r2, r3
 8001436:	d8f7      	bhi.n	8001428 <HAL_Delay+0x28>
  {
  }
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	2000000c 	.word	0x2000000c

08001448 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001458:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <__NVIC_SetPriorityGrouping+0x44>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001464:	4013      	ands	r3, r2
 8001466:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001470:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001474:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147a:	4a04      	ldr	r2, [pc, #16]	@ (800148c <__NVIC_SetPriorityGrouping+0x44>)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	60d3      	str	r3, [r2, #12]
}
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001494:	4b04      	ldr	r3, [pc, #16]	@ (80014a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	0a1b      	lsrs	r3, r3, #8
 800149a:	f003 0307 	and.w	r3, r3, #7
}
 800149e:	4618      	mov	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	6039      	str	r1, [r7, #0]
 80014b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	db0a      	blt.n	80014d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	490c      	ldr	r1, [pc, #48]	@ (80014f8 <__NVIC_SetPriority+0x4c>)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	0112      	lsls	r2, r2, #4
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	440b      	add	r3, r1
 80014d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d4:	e00a      	b.n	80014ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4908      	ldr	r1, [pc, #32]	@ (80014fc <__NVIC_SetPriority+0x50>)
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	3b04      	subs	r3, #4
 80014e4:	0112      	lsls	r2, r2, #4
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	440b      	add	r3, r1
 80014ea:	761a      	strb	r2, [r3, #24]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000e100 	.word	0xe000e100
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	@ 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f1c3 0307 	rsb	r3, r3, #7
 800151a:	2b04      	cmp	r3, #4
 800151c:	bf28      	it	cs
 800151e:	2304      	movcs	r3, #4
 8001520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3304      	adds	r3, #4
 8001526:	2b06      	cmp	r3, #6
 8001528:	d902      	bls.n	8001530 <NVIC_EncodePriority+0x30>
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3b03      	subs	r3, #3
 800152e:	e000      	b.n	8001532 <NVIC_EncodePriority+0x32>
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	f04f 32ff 	mov.w	r2, #4294967295
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43da      	mvns	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	401a      	ands	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001548:	f04f 31ff 	mov.w	r1, #4294967295
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa01 f303 	lsl.w	r3, r1, r3
 8001552:	43d9      	mvns	r1, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	4313      	orrs	r3, r2
         );
}
 800155a:	4618      	mov	r0, r3
 800155c:	3724      	adds	r7, #36	@ 0x24
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001578:	d301      	bcc.n	800157e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800157a:	2301      	movs	r3, #1
 800157c:	e00f      	b.n	800159e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157e:	4a0a      	ldr	r2, [pc, #40]	@ (80015a8 <SysTick_Config+0x40>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001586:	210f      	movs	r1, #15
 8001588:	f04f 30ff 	mov.w	r0, #4294967295
 800158c:	f7ff ff8e 	bl	80014ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001590:	4b05      	ldr	r3, [pc, #20]	@ (80015a8 <SysTick_Config+0x40>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001596:	4b04      	ldr	r3, [pc, #16]	@ (80015a8 <SysTick_Config+0x40>)
 8001598:	2207      	movs	r2, #7
 800159a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	e000e010 	.word	0xe000e010

080015ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff ff47 	bl	8001448 <__NVIC_SetPriorityGrouping>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b086      	sub	sp, #24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
 80015ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d4:	f7ff ff5c 	bl	8001490 <__NVIC_GetPriorityGrouping>
 80015d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	6978      	ldr	r0, [r7, #20]
 80015e0:	f7ff ff8e 	bl	8001500 <NVIC_EncodePriority>
 80015e4:	4602      	mov	r2, r0
 80015e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ea:	4611      	mov	r1, r2
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff5d 	bl	80014ac <__NVIC_SetPriority>
}
 80015f2:	bf00      	nop
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff ffb0 	bl	8001568 <SysTick_Config>
 8001608:	4603      	mov	r3, r0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001614:	b480      	push	{r7}
 8001616:	b089      	sub	sp, #36	@ 0x24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001626:	2300      	movs	r3, #0
 8001628:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
 800162e:	e159      	b.n	80018e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001630:	2201      	movs	r2, #1
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	4013      	ands	r3, r2
 8001642:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	429a      	cmp	r2, r3
 800164a:	f040 8148 	bne.w	80018de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 0303 	and.w	r3, r3, #3
 8001656:	2b01      	cmp	r3, #1
 8001658:	d005      	beq.n	8001666 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001662:	2b02      	cmp	r3, #2
 8001664:	d130      	bne.n	80016c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	2203      	movs	r2, #3
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43db      	mvns	r3, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4013      	ands	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4313      	orrs	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800169c:	2201      	movs	r2, #1
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	091b      	lsrs	r3, r3, #4
 80016b2:	f003 0201 	and.w	r2, r3, #1
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	2b03      	cmp	r3, #3
 80016d2:	d017      	beq.n	8001704 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	2203      	movs	r2, #3
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d123      	bne.n	8001758 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	08da      	lsrs	r2, r3, #3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3208      	adds	r2, #8
 8001718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800171c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	220f      	movs	r2, #15
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	691a      	ldr	r2, [r3, #16]
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	08da      	lsrs	r2, r3, #3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3208      	adds	r2, #8
 8001752:	69b9      	ldr	r1, [r7, #24]
 8001754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	2203      	movs	r2, #3
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4013      	ands	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 0203 	and.w	r2, r3, #3
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 80a2 	beq.w	80018de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	4b57      	ldr	r3, [pc, #348]	@ (80018fc <HAL_GPIO_Init+0x2e8>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a2:	4a56      	ldr	r2, [pc, #344]	@ (80018fc <HAL_GPIO_Init+0x2e8>)
 80017a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017aa:	4b54      	ldr	r3, [pc, #336]	@ (80018fc <HAL_GPIO_Init+0x2e8>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017b6:	4a52      	ldr	r2, [pc, #328]	@ (8001900 <HAL_GPIO_Init+0x2ec>)
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	089b      	lsrs	r3, r3, #2
 80017bc:	3302      	adds	r3, #2
 80017be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	220f      	movs	r2, #15
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4013      	ands	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a49      	ldr	r2, [pc, #292]	@ (8001904 <HAL_GPIO_Init+0x2f0>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d019      	beq.n	8001816 <HAL_GPIO_Init+0x202>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a48      	ldr	r2, [pc, #288]	@ (8001908 <HAL_GPIO_Init+0x2f4>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d013      	beq.n	8001812 <HAL_GPIO_Init+0x1fe>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a47      	ldr	r2, [pc, #284]	@ (800190c <HAL_GPIO_Init+0x2f8>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d00d      	beq.n	800180e <HAL_GPIO_Init+0x1fa>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a46      	ldr	r2, [pc, #280]	@ (8001910 <HAL_GPIO_Init+0x2fc>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d007      	beq.n	800180a <HAL_GPIO_Init+0x1f6>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a45      	ldr	r2, [pc, #276]	@ (8001914 <HAL_GPIO_Init+0x300>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d101      	bne.n	8001806 <HAL_GPIO_Init+0x1f2>
 8001802:	2304      	movs	r3, #4
 8001804:	e008      	b.n	8001818 <HAL_GPIO_Init+0x204>
 8001806:	2307      	movs	r3, #7
 8001808:	e006      	b.n	8001818 <HAL_GPIO_Init+0x204>
 800180a:	2303      	movs	r3, #3
 800180c:	e004      	b.n	8001818 <HAL_GPIO_Init+0x204>
 800180e:	2302      	movs	r3, #2
 8001810:	e002      	b.n	8001818 <HAL_GPIO_Init+0x204>
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <HAL_GPIO_Init+0x204>
 8001816:	2300      	movs	r3, #0
 8001818:	69fa      	ldr	r2, [r7, #28]
 800181a:	f002 0203 	and.w	r2, r2, #3
 800181e:	0092      	lsls	r2, r2, #2
 8001820:	4093      	lsls	r3, r2
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4313      	orrs	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001828:	4935      	ldr	r1, [pc, #212]	@ (8001900 <HAL_GPIO_Init+0x2ec>)
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	089b      	lsrs	r3, r3, #2
 800182e:	3302      	adds	r3, #2
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001836:	4b38      	ldr	r3, [pc, #224]	@ (8001918 <HAL_GPIO_Init+0x304>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	43db      	mvns	r3, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4013      	ands	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800185a:	4a2f      	ldr	r2, [pc, #188]	@ (8001918 <HAL_GPIO_Init+0x304>)
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001860:	4b2d      	ldr	r3, [pc, #180]	@ (8001918 <HAL_GPIO_Init+0x304>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d003      	beq.n	8001884 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001884:	4a24      	ldr	r2, [pc, #144]	@ (8001918 <HAL_GPIO_Init+0x304>)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800188a:	4b23      	ldr	r3, [pc, #140]	@ (8001918 <HAL_GPIO_Init+0x304>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	43db      	mvns	r3, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4013      	ands	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018ae:	4a1a      	ldr	r2, [pc, #104]	@ (8001918 <HAL_GPIO_Init+0x304>)
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018b4:	4b18      	ldr	r3, [pc, #96]	@ (8001918 <HAL_GPIO_Init+0x304>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018d8:	4a0f      	ldr	r2, [pc, #60]	@ (8001918 <HAL_GPIO_Init+0x304>)
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3301      	adds	r3, #1
 80018e2:	61fb      	str	r3, [r7, #28]
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	2b0f      	cmp	r3, #15
 80018e8:	f67f aea2 	bls.w	8001630 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018ec:	bf00      	nop
 80018ee:	bf00      	nop
 80018f0:	3724      	adds	r7, #36	@ 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800
 8001900:	40013800 	.word	0x40013800
 8001904:	40020000 	.word	0x40020000
 8001908:	40020400 	.word	0x40020400
 800190c:	40020800 	.word	0x40020800
 8001910:	40020c00 	.word	0x40020c00
 8001914:	40021000 	.word	0x40021000
 8001918:	40013c00 	.word	0x40013c00

0800191c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e12b      	b.n	8001b86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d106      	bne.n	8001948 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff fbba 	bl	80010bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2224      	movs	r2, #36	@ 0x24
 800194c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0201 	bic.w	r2, r2, #1
 800195e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800196e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800197e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001980:	f001 fb92 	bl	80030a8 <HAL_RCC_GetPCLK1Freq>
 8001984:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	4a81      	ldr	r2, [pc, #516]	@ (8001b90 <HAL_I2C_Init+0x274>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d807      	bhi.n	80019a0 <HAL_I2C_Init+0x84>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4a80      	ldr	r2, [pc, #512]	@ (8001b94 <HAL_I2C_Init+0x278>)
 8001994:	4293      	cmp	r3, r2
 8001996:	bf94      	ite	ls
 8001998:	2301      	movls	r3, #1
 800199a:	2300      	movhi	r3, #0
 800199c:	b2db      	uxtb	r3, r3
 800199e:	e006      	b.n	80019ae <HAL_I2C_Init+0x92>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4a7d      	ldr	r2, [pc, #500]	@ (8001b98 <HAL_I2C_Init+0x27c>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	bf94      	ite	ls
 80019a8:	2301      	movls	r3, #1
 80019aa:	2300      	movhi	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e0e7      	b.n	8001b86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4a78      	ldr	r2, [pc, #480]	@ (8001b9c <HAL_I2C_Init+0x280>)
 80019ba:	fba2 2303 	umull	r2, r3, r2, r3
 80019be:	0c9b      	lsrs	r3, r3, #18
 80019c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	430a      	orrs	r2, r1
 80019d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	4a6a      	ldr	r2, [pc, #424]	@ (8001b90 <HAL_I2C_Init+0x274>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d802      	bhi.n	80019f0 <HAL_I2C_Init+0xd4>
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	3301      	adds	r3, #1
 80019ee:	e009      	b.n	8001a04 <HAL_I2C_Init+0xe8>
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80019f6:	fb02 f303 	mul.w	r3, r2, r3
 80019fa:	4a69      	ldr	r2, [pc, #420]	@ (8001ba0 <HAL_I2C_Init+0x284>)
 80019fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001a00:	099b      	lsrs	r3, r3, #6
 8001a02:	3301      	adds	r3, #1
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	430b      	orrs	r3, r1
 8001a0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001a16:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	495c      	ldr	r1, [pc, #368]	@ (8001b90 <HAL_I2C_Init+0x274>)
 8001a20:	428b      	cmp	r3, r1
 8001a22:	d819      	bhi.n	8001a58 <HAL_I2C_Init+0x13c>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	1e59      	subs	r1, r3, #1
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a32:	1c59      	adds	r1, r3, #1
 8001a34:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a38:	400b      	ands	r3, r1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00a      	beq.n	8001a54 <HAL_I2C_Init+0x138>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	1e59      	subs	r1, r3, #1
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a52:	e051      	b.n	8001af8 <HAL_I2C_Init+0x1dc>
 8001a54:	2304      	movs	r3, #4
 8001a56:	e04f      	b.n	8001af8 <HAL_I2C_Init+0x1dc>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d111      	bne.n	8001a84 <HAL_I2C_Init+0x168>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	1e58      	subs	r0, r3, #1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6859      	ldr	r1, [r3, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	440b      	add	r3, r1
 8001a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a72:	3301      	adds	r3, #1
 8001a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	bf0c      	ite	eq
 8001a7c:	2301      	moveq	r3, #1
 8001a7e:	2300      	movne	r3, #0
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	e012      	b.n	8001aaa <HAL_I2C_Init+0x18e>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1e58      	subs	r0, r3, #1
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6859      	ldr	r1, [r3, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	0099      	lsls	r1, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	bf0c      	ite	eq
 8001aa4:	2301      	moveq	r3, #1
 8001aa6:	2300      	movne	r3, #0
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_I2C_Init+0x196>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e022      	b.n	8001af8 <HAL_I2C_Init+0x1dc>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10e      	bne.n	8001ad8 <HAL_I2C_Init+0x1bc>
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	1e58      	subs	r0, r3, #1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6859      	ldr	r1, [r3, #4]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	440b      	add	r3, r1
 8001ac8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001acc:	3301      	adds	r3, #1
 8001ace:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ad2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ad6:	e00f      	b.n	8001af8 <HAL_I2C_Init+0x1dc>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	1e58      	subs	r0, r3, #1
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6859      	ldr	r1, [r3, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	0099      	lsls	r1, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aee:	3301      	adds	r3, #1
 8001af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001af4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	6809      	ldr	r1, [r1, #0]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69da      	ldr	r2, [r3, #28]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b26:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6911      	ldr	r1, [r2, #16]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	68d2      	ldr	r2, [r2, #12]
 8001b32:	4311      	orrs	r1, r2
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	430b      	orrs	r3, r1
 8001b3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0201 	orr.w	r2, r2, #1
 8001b66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2220      	movs	r2, #32
 8001b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	000186a0 	.word	0x000186a0
 8001b94:	001e847f 	.word	0x001e847f
 8001b98:	003d08ff 	.word	0x003d08ff
 8001b9c:	431bde83 	.word	0x431bde83
 8001ba0:	10624dd3 	.word	0x10624dd3

08001ba4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af02      	add	r7, sp, #8
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	607a      	str	r2, [r7, #4]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	817b      	strh	r3, [r7, #10]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bb8:	f7ff fc16 	bl	80013e8 <HAL_GetTick>
 8001bbc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b20      	cmp	r3, #32
 8001bc8:	f040 80e0 	bne.w	8001d8c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	2319      	movs	r3, #25
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	4970      	ldr	r1, [pc, #448]	@ (8001d98 <HAL_I2C_Master_Transmit+0x1f4>)
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f000 fc58 	bl	800248c <I2C_WaitOnFlagUntilTimeout>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001be2:	2302      	movs	r3, #2
 8001be4:	e0d3      	b.n	8001d8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d101      	bne.n	8001bf4 <HAL_I2C_Master_Transmit+0x50>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	e0cc      	b.n	8001d8e <HAL_I2C_Master_Transmit+0x1ea>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d007      	beq.n	8001c1a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f042 0201 	orr.w	r2, r2, #1
 8001c18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2221      	movs	r2, #33	@ 0x21
 8001c2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2210      	movs	r2, #16
 8001c36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	893a      	ldrh	r2, [r7, #8]
 8001c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4a50      	ldr	r2, [pc, #320]	@ (8001d9c <HAL_I2C_Master_Transmit+0x1f8>)
 8001c5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c5c:	8979      	ldrh	r1, [r7, #10]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	6a3a      	ldr	r2, [r7, #32]
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 fac2 	bl	80021ec <I2C_MasterRequestWrite>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e08d      	b.n	8001d8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c88:	e066      	b.n	8001d58 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	6a39      	ldr	r1, [r7, #32]
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f000 fcd2 	bl	8002638 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00d      	beq.n	8001cb6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d107      	bne.n	8001cb2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e06b      	b.n	8001d8e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cba:	781a      	ldrb	r2, [r3, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc6:	1c5a      	adds	r2, r3, #1
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d11b      	bne.n	8001d2c <HAL_I2C_Master_Transmit+0x188>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d017      	beq.n	8001d2c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d00:	781a      	ldrb	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0c:	1c5a      	adds	r2, r3, #1
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d24:	3b01      	subs	r3, #1
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	6a39      	ldr	r1, [r7, #32]
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 fcc2 	bl	80026ba <I2C_WaitOnBTFFlagUntilTimeout>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00d      	beq.n	8001d58 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d107      	bne.n	8001d54 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d52:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e01a      	b.n	8001d8e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d194      	bne.n	8001c8a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2220      	movs	r2, #32
 8001d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	e000      	b.n	8001d8e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d8c:	2302      	movs	r3, #2
  }
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	00100002 	.word	0x00100002
 8001d9c:	ffff0000 	.word	0xffff0000

08001da0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08c      	sub	sp, #48	@ 0x30
 8001da4:	af02      	add	r7, sp, #8
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	607a      	str	r2, [r7, #4]
 8001daa:	461a      	mov	r2, r3
 8001dac:	460b      	mov	r3, r1
 8001dae:	817b      	strh	r3, [r7, #10]
 8001db0:	4613      	mov	r3, r2
 8001db2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001db4:	f7ff fb18 	bl	80013e8 <HAL_GetTick>
 8001db8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b20      	cmp	r3, #32
 8001dc4:	f040 820b 	bne.w	80021de <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	2319      	movs	r3, #25
 8001dce:	2201      	movs	r2, #1
 8001dd0:	497c      	ldr	r1, [pc, #496]	@ (8001fc4 <HAL_I2C_Master_Receive+0x224>)
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f000 fb5a 	bl	800248c <I2C_WaitOnFlagUntilTimeout>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001dde:	2302      	movs	r3, #2
 8001de0:	e1fe      	b.n	80021e0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <HAL_I2C_Master_Receive+0x50>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e1f7      	b.n	80021e0 <HAL_I2C_Master_Receive+0x440>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d007      	beq.n	8001e16 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f042 0201 	orr.w	r2, r2, #1
 8001e14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2222      	movs	r2, #34	@ 0x22
 8001e2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2210      	movs	r2, #16
 8001e32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	893a      	ldrh	r2, [r7, #8]
 8001e46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	4a5c      	ldr	r2, [pc, #368]	@ (8001fc8 <HAL_I2C_Master_Receive+0x228>)
 8001e56:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e58:	8979      	ldrh	r1, [r7, #10]
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 fa46 	bl	80022f0 <I2C_MasterRequestRead>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e1b8      	b.n	80021e0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d113      	bne.n	8001e9e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e76:	2300      	movs	r3, #0
 8001e78:	623b      	str	r3, [r7, #32]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	623b      	str	r3, [r7, #32]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	623b      	str	r3, [r7, #32]
 8001e8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	e18c      	b.n	80021b8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d11b      	bne.n	8001ede <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001eb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	61fb      	str	r3, [r7, #28]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	e16c      	b.n	80021b8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d11b      	bne.n	8001f1e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ef4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f06:	2300      	movs	r3, #0
 8001f08:	61bb      	str	r3, [r7, #24]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	61bb      	str	r3, [r7, #24]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	61bb      	str	r3, [r7, #24]
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	e14c      	b.n	80021b8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001f2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001f44:	e138      	b.n	80021b8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	f200 80f1 	bhi.w	8002132 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d123      	bne.n	8001fa0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f5a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f000 fbed 	bl	800273c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e139      	b.n	80021e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	691a      	ldr	r2, [r3, #16]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	3b01      	subs	r3, #1
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001f9e:	e10b      	b.n	80021b8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d14e      	bne.n	8002046 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fae:	2200      	movs	r2, #0
 8001fb0:	4906      	ldr	r1, [pc, #24]	@ (8001fcc <HAL_I2C_Master_Receive+0x22c>)
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 fa6a 	bl	800248c <I2C_WaitOnFlagUntilTimeout>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d008      	beq.n	8001fd0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e10e      	b.n	80021e0 <HAL_I2C_Master_Receive+0x440>
 8001fc2:	bf00      	nop
 8001fc4:	00100002 	.word	0x00100002
 8001fc8:	ffff0000 	.word	0xffff0000
 8001fcc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	691a      	ldr	r2, [r3, #16]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002008:	b29b      	uxth	r3, r3
 800200a:	3b01      	subs	r3, #1
 800200c:	b29a      	uxth	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	691a      	ldr	r2, [r3, #16]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002024:	1c5a      	adds	r2, r3, #1
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800202e:	3b01      	subs	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800203a:	b29b      	uxth	r3, r3
 800203c:	3b01      	subs	r3, #1
 800203e:	b29a      	uxth	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002044:	e0b8      	b.n	80021b8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800204c:	2200      	movs	r2, #0
 800204e:	4966      	ldr	r1, [pc, #408]	@ (80021e8 <HAL_I2C_Master_Receive+0x448>)
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 fa1b 	bl	800248c <I2C_WaitOnFlagUntilTimeout>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e0bf      	b.n	80021e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800206e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691a      	ldr	r2, [r3, #16]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800208c:	3b01      	subs	r3, #1
 800208e:	b29a      	uxth	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002098:	b29b      	uxth	r3, r3
 800209a:	3b01      	subs	r3, #1
 800209c:	b29a      	uxth	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020a8:	2200      	movs	r2, #0
 80020aa:	494f      	ldr	r1, [pc, #316]	@ (80021e8 <HAL_I2C_Master_Receive+0x448>)
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f000 f9ed 	bl	800248c <I2C_WaitOnFlagUntilTimeout>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e091      	b.n	80021e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691a      	ldr	r2, [r3, #16]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020e8:	3b01      	subs	r3, #1
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	3b01      	subs	r3, #1
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	691a      	ldr	r2, [r3, #16]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002110:	1c5a      	adds	r2, r3, #1
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800211a:	3b01      	subs	r3, #1
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002126:	b29b      	uxth	r3, r3
 8002128:	3b01      	subs	r3, #1
 800212a:	b29a      	uxth	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002130:	e042      	b.n	80021b8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002134:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 fb00 	bl	800273c <I2C_WaitOnRXNEFlagUntilTimeout>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e04c      	b.n	80021e0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002158:	1c5a      	adds	r2, r3, #1
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002162:	3b01      	subs	r3, #1
 8002164:	b29a      	uxth	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800216e:	b29b      	uxth	r3, r3
 8002170:	3b01      	subs	r3, #1
 8002172:	b29a      	uxth	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	2b04      	cmp	r3, #4
 8002184:	d118      	bne.n	80021b8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021a2:	3b01      	subs	r3, #1
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	3b01      	subs	r3, #1
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f47f aec2 	bne.w	8001f46 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2220      	movs	r2, #32
 80021c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	e000      	b.n	80021e0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80021de:	2302      	movs	r3, #2
  }
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3728      	adds	r7, #40	@ 0x28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	00010004 	.word	0x00010004

080021ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b088      	sub	sp, #32
 80021f0:	af02      	add	r7, sp, #8
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	607a      	str	r2, [r7, #4]
 80021f6:	603b      	str	r3, [r7, #0]
 80021f8:	460b      	mov	r3, r1
 80021fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002200:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2b08      	cmp	r3, #8
 8002206:	d006      	beq.n	8002216 <I2C_MasterRequestWrite+0x2a>
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d003      	beq.n	8002216 <I2C_MasterRequestWrite+0x2a>
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002214:	d108      	bne.n	8002228 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	e00b      	b.n	8002240 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222c:	2b12      	cmp	r3, #18
 800222e:	d107      	bne.n	8002240 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800223e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 f91d 	bl	800248c <I2C_WaitOnFlagUntilTimeout>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00d      	beq.n	8002274 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002262:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002266:	d103      	bne.n	8002270 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800226e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e035      	b.n	80022e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800227c:	d108      	bne.n	8002290 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800227e:	897b      	ldrh	r3, [r7, #10]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	461a      	mov	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800228c:	611a      	str	r2, [r3, #16]
 800228e:	e01b      	b.n	80022c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002290:	897b      	ldrh	r3, [r7, #10]
 8002292:	11db      	asrs	r3, r3, #7
 8002294:	b2db      	uxtb	r3, r3
 8002296:	f003 0306 	and.w	r3, r3, #6
 800229a:	b2db      	uxtb	r3, r3
 800229c:	f063 030f 	orn	r3, r3, #15
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	490e      	ldr	r1, [pc, #56]	@ (80022e8 <I2C_MasterRequestWrite+0xfc>)
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 f943 	bl	800253a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e010      	b.n	80022e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022be:	897b      	ldrh	r3, [r7, #10]
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	4907      	ldr	r1, [pc, #28]	@ (80022ec <I2C_MasterRequestWrite+0x100>)
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f000 f933 	bl	800253a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e000      	b.n	80022e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	00010008 	.word	0x00010008
 80022ec:	00010002 	.word	0x00010002

080022f0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	460b      	mov	r3, r1
 80022fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002304:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002314:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2b08      	cmp	r3, #8
 800231a:	d006      	beq.n	800232a <I2C_MasterRequestRead+0x3a>
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d003      	beq.n	800232a <I2C_MasterRequestRead+0x3a>
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002328:	d108      	bne.n	800233c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	e00b      	b.n	8002354 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002340:	2b11      	cmp	r3, #17
 8002342:	d107      	bne.n	8002354 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002352:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 f893 	bl	800248c <I2C_WaitOnFlagUntilTimeout>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00d      	beq.n	8002388 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002376:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800237a:	d103      	bne.n	8002384 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002382:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e079      	b.n	800247c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002390:	d108      	bne.n	80023a4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002392:	897b      	ldrh	r3, [r7, #10]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	b2da      	uxtb	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	611a      	str	r2, [r3, #16]
 80023a2:	e05f      	b.n	8002464 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80023a4:	897b      	ldrh	r3, [r7, #10]
 80023a6:	11db      	asrs	r3, r3, #7
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	f003 0306 	and.w	r3, r3, #6
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	f063 030f 	orn	r3, r3, #15
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	4930      	ldr	r1, [pc, #192]	@ (8002484 <I2C_MasterRequestRead+0x194>)
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 f8b9 	bl	800253a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e054      	b.n	800247c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023d2:	897b      	ldrh	r3, [r7, #10]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	4929      	ldr	r1, [pc, #164]	@ (8002488 <I2C_MasterRequestRead+0x198>)
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 f8a9 	bl	800253a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e044      	b.n	800247c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002416:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 f831 	bl	800248c <I2C_WaitOnFlagUntilTimeout>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00d      	beq.n	800244c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800243a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800243e:	d103      	bne.n	8002448 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002446:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e017      	b.n	800247c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800244c:	897b      	ldrh	r3, [r7, #10]
 800244e:	11db      	asrs	r3, r3, #7
 8002450:	b2db      	uxtb	r3, r3
 8002452:	f003 0306 	and.w	r3, r3, #6
 8002456:	b2db      	uxtb	r3, r3
 8002458:	f063 030e 	orn	r3, r3, #14
 800245c:	b2da      	uxtb	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	4907      	ldr	r1, [pc, #28]	@ (8002488 <I2C_MasterRequestRead+0x198>)
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 f865 	bl	800253a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e000      	b.n	800247c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	00010008 	.word	0x00010008
 8002488:	00010002 	.word	0x00010002

0800248c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	603b      	str	r3, [r7, #0]
 8002498:	4613      	mov	r3, r2
 800249a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800249c:	e025      	b.n	80024ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a4:	d021      	beq.n	80024ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024a6:	f7fe ff9f 	bl	80013e8 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d302      	bcc.n	80024bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d116      	bne.n	80024ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2220      	movs	r2, #32
 80024c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d6:	f043 0220 	orr.w	r2, r3, #32
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e023      	b.n	8002532 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	0c1b      	lsrs	r3, r3, #16
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d10d      	bne.n	8002510 <I2C_WaitOnFlagUntilTimeout+0x84>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	43da      	mvns	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	4013      	ands	r3, r2
 8002500:	b29b      	uxth	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	bf0c      	ite	eq
 8002506:	2301      	moveq	r3, #1
 8002508:	2300      	movne	r3, #0
 800250a:	b2db      	uxtb	r3, r3
 800250c:	461a      	mov	r2, r3
 800250e:	e00c      	b.n	800252a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	43da      	mvns	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	4013      	ands	r3, r2
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	bf0c      	ite	eq
 8002522:	2301      	moveq	r3, #1
 8002524:	2300      	movne	r3, #0
 8002526:	b2db      	uxtb	r3, r3
 8002528:	461a      	mov	r2, r3
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	429a      	cmp	r2, r3
 800252e:	d0b6      	beq.n	800249e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b084      	sub	sp, #16
 800253e:	af00      	add	r7, sp, #0
 8002540:	60f8      	str	r0, [r7, #12]
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
 8002546:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002548:	e051      	b.n	80025ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002554:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002558:	d123      	bne.n	80025a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002568:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002572:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2220      	movs	r2, #32
 800257e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258e:	f043 0204 	orr.w	r2, r3, #4
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e046      	b.n	8002630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a8:	d021      	beq.n	80025ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025aa:	f7fe ff1d 	bl	80013e8 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d302      	bcc.n	80025c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d116      	bne.n	80025ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2220      	movs	r2, #32
 80025ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025da:	f043 0220 	orr.w	r2, r3, #32
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e020      	b.n	8002630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	0c1b      	lsrs	r3, r3, #16
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d10c      	bne.n	8002612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	43da      	mvns	r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	4013      	ands	r3, r2
 8002604:	b29b      	uxth	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	bf14      	ite	ne
 800260a:	2301      	movne	r3, #1
 800260c:	2300      	moveq	r3, #0
 800260e:	b2db      	uxtb	r3, r3
 8002610:	e00b      	b.n	800262a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	43da      	mvns	r2, r3
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	4013      	ands	r3, r2
 800261e:	b29b      	uxth	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	bf14      	ite	ne
 8002624:	2301      	movne	r3, #1
 8002626:	2300      	moveq	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d18d      	bne.n	800254a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002644:	e02d      	b.n	80026a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 f8ce 	bl	80027e8 <I2C_IsAcknowledgeFailed>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e02d      	b.n	80026b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265c:	d021      	beq.n	80026a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800265e:	f7fe fec3 	bl	80013e8 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	429a      	cmp	r2, r3
 800266c:	d302      	bcc.n	8002674 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d116      	bne.n	80026a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2220      	movs	r2, #32
 800267e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268e:	f043 0220 	orr.w	r2, r3, #32
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e007      	b.n	80026b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ac:	2b80      	cmp	r3, #128	@ 0x80
 80026ae:	d1ca      	bne.n	8002646 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b084      	sub	sp, #16
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026c6:	e02d      	b.n	8002724 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f000 f88d 	bl	80027e8 <I2C_IsAcknowledgeFailed>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e02d      	b.n	8002734 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026de:	d021      	beq.n	8002724 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e0:	f7fe fe82 	bl	80013e8 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d302      	bcc.n	80026f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d116      	bne.n	8002724 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2220      	movs	r2, #32
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002710:	f043 0220 	orr.w	r2, r3, #32
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e007      	b.n	8002734 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	2b04      	cmp	r3, #4
 8002730:	d1ca      	bne.n	80026c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002748:	e042      	b.n	80027d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	f003 0310 	and.w	r3, r3, #16
 8002754:	2b10      	cmp	r3, #16
 8002756:	d119      	bne.n	800278c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f06f 0210 	mvn.w	r2, #16
 8002760:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e029      	b.n	80027e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800278c:	f7fe fe2c 	bl	80013e8 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	429a      	cmp	r2, r3
 800279a:	d302      	bcc.n	80027a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d116      	bne.n	80027d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027bc:	f043 0220 	orr.w	r2, r3, #32
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e007      	b.n	80027e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027da:	2b40      	cmp	r3, #64	@ 0x40
 80027dc:	d1b5      	bne.n	800274a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027fe:	d11b      	bne.n	8002838 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002808:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002824:	f043 0204 	orr.w	r2, r3, #4
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e000      	b.n	800283a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e267      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d075      	beq.n	8002952 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002866:	4b88      	ldr	r3, [pc, #544]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	2b04      	cmp	r3, #4
 8002870:	d00c      	beq.n	800288c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002872:	4b85      	ldr	r3, [pc, #532]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800287a:	2b08      	cmp	r3, #8
 800287c:	d112      	bne.n	80028a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800287e:	4b82      	ldr	r3, [pc, #520]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002886:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800288a:	d10b      	bne.n	80028a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288c:	4b7e      	ldr	r3, [pc, #504]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d05b      	beq.n	8002950 <HAL_RCC_OscConfig+0x108>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d157      	bne.n	8002950 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e242      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028ac:	d106      	bne.n	80028bc <HAL_RCC_OscConfig+0x74>
 80028ae:	4b76      	ldr	r3, [pc, #472]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a75      	ldr	r2, [pc, #468]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	e01d      	b.n	80028f8 <HAL_RCC_OscConfig+0xb0>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCC_OscConfig+0x98>
 80028c6:	4b70      	ldr	r3, [pc, #448]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a6f      	ldr	r2, [pc, #444]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	4b6d      	ldr	r3, [pc, #436]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a6c      	ldr	r2, [pc, #432]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	e00b      	b.n	80028f8 <HAL_RCC_OscConfig+0xb0>
 80028e0:	4b69      	ldr	r3, [pc, #420]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a68      	ldr	r2, [pc, #416]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	4b66      	ldr	r3, [pc, #408]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a65      	ldr	r2, [pc, #404]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80028f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d013      	beq.n	8002928 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002900:	f7fe fd72 	bl	80013e8 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002908:	f7fe fd6e 	bl	80013e8 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b64      	cmp	r3, #100	@ 0x64
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e207      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	4b5b      	ldr	r3, [pc, #364]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0xc0>
 8002926:	e014      	b.n	8002952 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7fe fd5e 	bl	80013e8 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002930:	f7fe fd5a 	bl	80013e8 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b64      	cmp	r3, #100	@ 0x64
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e1f3      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002942:	4b51      	ldr	r3, [pc, #324]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0xe8>
 800294e:	e000      	b.n	8002952 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d063      	beq.n	8002a26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800295e:	4b4a      	ldr	r3, [pc, #296]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00b      	beq.n	8002982 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800296a:	4b47      	ldr	r3, [pc, #284]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002972:	2b08      	cmp	r3, #8
 8002974:	d11c      	bne.n	80029b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002976:	4b44      	ldr	r3, [pc, #272]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d116      	bne.n	80029b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002982:	4b41      	ldr	r3, [pc, #260]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d005      	beq.n	800299a <HAL_RCC_OscConfig+0x152>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d001      	beq.n	800299a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e1c7      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	4937      	ldr	r1, [pc, #220]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ae:	e03a      	b.n	8002a26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d020      	beq.n	80029fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029b8:	4b34      	ldr	r3, [pc, #208]	@ (8002a8c <HAL_RCC_OscConfig+0x244>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029be:	f7fe fd13 	bl	80013e8 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029c6:	f7fe fd0f 	bl	80013e8 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e1a8      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e4:	4b28      	ldr	r3, [pc, #160]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4925      	ldr	r1, [pc, #148]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	600b      	str	r3, [r1, #0]
 80029f8:	e015      	b.n	8002a26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029fa:	4b24      	ldr	r3, [pc, #144]	@ (8002a8c <HAL_RCC_OscConfig+0x244>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a00:	f7fe fcf2 	bl	80013e8 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a08:	f7fe fcee 	bl	80013e8 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e187      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d036      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d016      	beq.n	8002a68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a3a:	4b15      	ldr	r3, [pc, #84]	@ (8002a90 <HAL_RCC_OscConfig+0x248>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a40:	f7fe fcd2 	bl	80013e8 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a48:	f7fe fcce 	bl	80013e8 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e167      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a88 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x200>
 8002a66:	e01b      	b.n	8002aa0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a68:	4b09      	ldr	r3, [pc, #36]	@ (8002a90 <HAL_RCC_OscConfig+0x248>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6e:	f7fe fcbb 	bl	80013e8 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a74:	e00e      	b.n	8002a94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a76:	f7fe fcb7 	bl	80013e8 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d907      	bls.n	8002a94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e150      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	42470000 	.word	0x42470000
 8002a90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a94:	4b88      	ldr	r3, [pc, #544]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002a96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1ea      	bne.n	8002a76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 8097 	beq.w	8002bdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ab2:	4b81      	ldr	r3, [pc, #516]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10f      	bne.n	8002ade <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	4b7d      	ldr	r3, [pc, #500]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	4a7c      	ldr	r2, [pc, #496]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ace:	4b7a      	ldr	r3, [pc, #488]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ada:	2301      	movs	r3, #1
 8002adc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ade:	4b77      	ldr	r3, [pc, #476]	@ (8002cbc <HAL_RCC_OscConfig+0x474>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d118      	bne.n	8002b1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aea:	4b74      	ldr	r3, [pc, #464]	@ (8002cbc <HAL_RCC_OscConfig+0x474>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a73      	ldr	r2, [pc, #460]	@ (8002cbc <HAL_RCC_OscConfig+0x474>)
 8002af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af6:	f7fe fc77 	bl	80013e8 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002afe:	f7fe fc73 	bl	80013e8 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e10c      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b10:	4b6a      	ldr	r3, [pc, #424]	@ (8002cbc <HAL_RCC_OscConfig+0x474>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0f0      	beq.n	8002afe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d106      	bne.n	8002b32 <HAL_RCC_OscConfig+0x2ea>
 8002b24:	4b64      	ldr	r3, [pc, #400]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b28:	4a63      	ldr	r2, [pc, #396]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b30:	e01c      	b.n	8002b6c <HAL_RCC_OscConfig+0x324>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b05      	cmp	r3, #5
 8002b38:	d10c      	bne.n	8002b54 <HAL_RCC_OscConfig+0x30c>
 8002b3a:	4b5f      	ldr	r3, [pc, #380]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3e:	4a5e      	ldr	r2, [pc, #376]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b40:	f043 0304 	orr.w	r3, r3, #4
 8002b44:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b46:	4b5c      	ldr	r3, [pc, #368]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b4a:	4a5b      	ldr	r2, [pc, #364]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b52:	e00b      	b.n	8002b6c <HAL_RCC_OscConfig+0x324>
 8002b54:	4b58      	ldr	r3, [pc, #352]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b58:	4a57      	ldr	r2, [pc, #348]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b5a:	f023 0301 	bic.w	r3, r3, #1
 8002b5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b60:	4b55      	ldr	r3, [pc, #340]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b64:	4a54      	ldr	r2, [pc, #336]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b66:	f023 0304 	bic.w	r3, r3, #4
 8002b6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d015      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b74:	f7fe fc38 	bl	80013e8 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7a:	e00a      	b.n	8002b92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b7c:	f7fe fc34 	bl	80013e8 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e0cb      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b92:	4b49      	ldr	r3, [pc, #292]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0ee      	beq.n	8002b7c <HAL_RCC_OscConfig+0x334>
 8002b9e:	e014      	b.n	8002bca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba0:	f7fe fc22 	bl	80013e8 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba8:	f7fe fc1e 	bl	80013e8 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e0b5      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bbe:	4b3e      	ldr	r3, [pc, #248]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1ee      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bca:	7dfb      	ldrb	r3, [r7, #23]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d105      	bne.n	8002bdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd0:	4b39      	ldr	r3, [pc, #228]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd4:	4a38      	ldr	r2, [pc, #224]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002bd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bda:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 80a1 	beq.w	8002d28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002be6:	4b34      	ldr	r3, [pc, #208]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d05c      	beq.n	8002cac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d141      	bne.n	8002c7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfa:	4b31      	ldr	r3, [pc, #196]	@ (8002cc0 <HAL_RCC_OscConfig+0x478>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c00:	f7fe fbf2 	bl	80013e8 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c08:	f7fe fbee 	bl	80013e8 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e087      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1a:	4b27      	ldr	r3, [pc, #156]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69da      	ldr	r2, [r3, #28]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c34:	019b      	lsls	r3, r3, #6
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3c:	085b      	lsrs	r3, r3, #1
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	041b      	lsls	r3, r3, #16
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c48:	061b      	lsls	r3, r3, #24
 8002c4a:	491b      	ldr	r1, [pc, #108]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c50:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc0 <HAL_RCC_OscConfig+0x478>)
 8002c52:	2201      	movs	r2, #1
 8002c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c56:	f7fe fbc7 	bl	80013e8 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c5e:	f7fe fbc3 	bl	80013e8 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e05c      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c70:	4b11      	ldr	r3, [pc, #68]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x416>
 8002c7c:	e054      	b.n	8002d28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7e:	4b10      	ldr	r3, [pc, #64]	@ (8002cc0 <HAL_RCC_OscConfig+0x478>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c84:	f7fe fbb0 	bl	80013e8 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c8c:	f7fe fbac 	bl	80013e8 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e045      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9e:	4b06      	ldr	r3, [pc, #24]	@ (8002cb8 <HAL_RCC_OscConfig+0x470>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f0      	bne.n	8002c8c <HAL_RCC_OscConfig+0x444>
 8002caa:	e03d      	b.n	8002d28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d107      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e038      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40007000 	.word	0x40007000
 8002cc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d34 <HAL_RCC_OscConfig+0x4ec>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d028      	beq.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d121      	bne.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d11a      	bne.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d111      	bne.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0a:	085b      	lsrs	r3, r3, #1
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d107      	bne.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d001      	beq.n	8002d28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40023800 	.word	0x40023800

08002d38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0cc      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d4c:	4b68      	ldr	r3, [pc, #416]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d90c      	bls.n	8002d74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5a:	4b65      	ldr	r3, [pc, #404]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d62:	4b63      	ldr	r3, [pc, #396]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d001      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e0b8      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d020      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d8c:	4b59      	ldr	r3, [pc, #356]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	4a58      	ldr	r2, [pc, #352]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002da4:	4b53      	ldr	r3, [pc, #332]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	4a52      	ldr	r2, [pc, #328]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002daa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002dae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db0:	4b50      	ldr	r3, [pc, #320]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	494d      	ldr	r1, [pc, #308]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d044      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d107      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd6:	4b47      	ldr	r3, [pc, #284]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d119      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e07f      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d003      	beq.n	8002df6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d107      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d109      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e06f      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e06:	4b3b      	ldr	r3, [pc, #236]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e067      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e16:	4b37      	ldr	r3, [pc, #220]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f023 0203 	bic.w	r2, r3, #3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4934      	ldr	r1, [pc, #208]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e28:	f7fe fade 	bl	80013e8 <HAL_GetTick>
 8002e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2e:	e00a      	b.n	8002e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e30:	f7fe fada 	bl	80013e8 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e04f      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e46:	4b2b      	ldr	r3, [pc, #172]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 020c 	and.w	r2, r3, #12
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d1eb      	bne.n	8002e30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e58:	4b25      	ldr	r3, [pc, #148]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d20c      	bcs.n	8002e80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e66:	4b22      	ldr	r3, [pc, #136]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6e:	4b20      	ldr	r3, [pc, #128]	@ (8002ef0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e032      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e8c:	4b19      	ldr	r3, [pc, #100]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	4916      	ldr	r1, [pc, #88]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d009      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eaa:	4b12      	ldr	r3, [pc, #72]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	490e      	ldr	r1, [pc, #56]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ebe:	f000 f821 	bl	8002f04 <HAL_RCC_GetSysClockFreq>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	490a      	ldr	r1, [pc, #40]	@ (8002ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed0:	5ccb      	ldrb	r3, [r1, r3]
 8002ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed6:	4a09      	ldr	r2, [pc, #36]	@ (8002efc <HAL_RCC_ClockConfig+0x1c4>)
 8002ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002eda:	4b09      	ldr	r3, [pc, #36]	@ (8002f00 <HAL_RCC_ClockConfig+0x1c8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fe fa3e 	bl	8001360 <HAL_InitTick>

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40023c00 	.word	0x40023c00
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	08003a50 	.word	0x08003a50
 8002efc:	20000004 	.word	0x20000004
 8002f00:	20000008 	.word	0x20000008

08002f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f08:	b090      	sub	sp, #64	@ 0x40
 8002f0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f10:	2300      	movs	r3, #0
 8002f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f14:	2300      	movs	r3, #0
 8002f16:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f1c:	4b59      	ldr	r3, [pc, #356]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 030c 	and.w	r3, r3, #12
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d00d      	beq.n	8002f44 <HAL_RCC_GetSysClockFreq+0x40>
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	f200 80a1 	bhi.w	8003070 <HAL_RCC_GetSysClockFreq+0x16c>
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <HAL_RCC_GetSysClockFreq+0x34>
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d003      	beq.n	8002f3e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f36:	e09b      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f38:	4b53      	ldr	r3, [pc, #332]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x184>)
 8002f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002f3c:	e09b      	b.n	8003076 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f3e:	4b53      	ldr	r3, [pc, #332]	@ (800308c <HAL_RCC_GetSysClockFreq+0x188>)
 8002f40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002f42:	e098      	b.n	8003076 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f44:	4b4f      	ldr	r3, [pc, #316]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f4c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f4e:	4b4d      	ldr	r3, [pc, #308]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d028      	beq.n	8002fac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f5a:	4b4a      	ldr	r3, [pc, #296]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	099b      	lsrs	r3, r3, #6
 8002f60:	2200      	movs	r2, #0
 8002f62:	623b      	str	r3, [r7, #32]
 8002f64:	627a      	str	r2, [r7, #36]	@ 0x24
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	4b47      	ldr	r3, [pc, #284]	@ (800308c <HAL_RCC_GetSysClockFreq+0x188>)
 8002f70:	fb03 f201 	mul.w	r2, r3, r1
 8002f74:	2300      	movs	r3, #0
 8002f76:	fb00 f303 	mul.w	r3, r0, r3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	4a43      	ldr	r2, [pc, #268]	@ (800308c <HAL_RCC_GetSysClockFreq+0x188>)
 8002f7e:	fba0 1202 	umull	r1, r2, r0, r2
 8002f82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f84:	460a      	mov	r2, r1
 8002f86:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002f88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f8a:	4413      	add	r3, r2
 8002f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f90:	2200      	movs	r2, #0
 8002f92:	61bb      	str	r3, [r7, #24]
 8002f94:	61fa      	str	r2, [r7, #28]
 8002f96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002f9e:	f7fd f977 	bl	8000290 <__aeabi_uldivmod>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002faa:	e053      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fac:	4b35      	ldr	r3, [pc, #212]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	099b      	lsrs	r3, r3, #6
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	617a      	str	r2, [r7, #20]
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002fbe:	f04f 0b00 	mov.w	fp, #0
 8002fc2:	4652      	mov	r2, sl
 8002fc4:	465b      	mov	r3, fp
 8002fc6:	f04f 0000 	mov.w	r0, #0
 8002fca:	f04f 0100 	mov.w	r1, #0
 8002fce:	0159      	lsls	r1, r3, #5
 8002fd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fd4:	0150      	lsls	r0, r2, #5
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	ebb2 080a 	subs.w	r8, r2, sl
 8002fde:	eb63 090b 	sbc.w	r9, r3, fp
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002fee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002ff2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002ff6:	ebb2 0408 	subs.w	r4, r2, r8
 8002ffa:	eb63 0509 	sbc.w	r5, r3, r9
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	00eb      	lsls	r3, r5, #3
 8003008:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800300c:	00e2      	lsls	r2, r4, #3
 800300e:	4614      	mov	r4, r2
 8003010:	461d      	mov	r5, r3
 8003012:	eb14 030a 	adds.w	r3, r4, sl
 8003016:	603b      	str	r3, [r7, #0]
 8003018:	eb45 030b 	adc.w	r3, r5, fp
 800301c:	607b      	str	r3, [r7, #4]
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	f04f 0300 	mov.w	r3, #0
 8003026:	e9d7 4500 	ldrd	r4, r5, [r7]
 800302a:	4629      	mov	r1, r5
 800302c:	028b      	lsls	r3, r1, #10
 800302e:	4621      	mov	r1, r4
 8003030:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003034:	4621      	mov	r1, r4
 8003036:	028a      	lsls	r2, r1, #10
 8003038:	4610      	mov	r0, r2
 800303a:	4619      	mov	r1, r3
 800303c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800303e:	2200      	movs	r2, #0
 8003040:	60bb      	str	r3, [r7, #8]
 8003042:	60fa      	str	r2, [r7, #12]
 8003044:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003048:	f7fd f922 	bl	8000290 <__aeabi_uldivmod>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	4613      	mov	r3, r2
 8003052:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003054:	4b0b      	ldr	r3, [pc, #44]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x180>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	0c1b      	lsrs	r3, r3, #16
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	3301      	adds	r3, #1
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003064:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003068:	fbb2 f3f3 	udiv	r3, r2, r3
 800306c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800306e:	e002      	b.n	8003076 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003070:	4b05      	ldr	r3, [pc, #20]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x184>)
 8003072:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003078:	4618      	mov	r0, r3
 800307a:	3740      	adds	r7, #64	@ 0x40
 800307c:	46bd      	mov	sp, r7
 800307e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003082:	bf00      	nop
 8003084:	40023800 	.word	0x40023800
 8003088:	00f42400 	.word	0x00f42400
 800308c:	017d7840 	.word	0x017d7840

08003090 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003094:	4b03      	ldr	r3, [pc, #12]	@ (80030a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003096:	681b      	ldr	r3, [r3, #0]
}
 8003098:	4618      	mov	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	20000004 	.word	0x20000004

080030a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030ac:	f7ff fff0 	bl	8003090 <HAL_RCC_GetHCLKFreq>
 80030b0:	4602      	mov	r2, r0
 80030b2:	4b05      	ldr	r3, [pc, #20]	@ (80030c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	0a9b      	lsrs	r3, r3, #10
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	4903      	ldr	r1, [pc, #12]	@ (80030cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030be:	5ccb      	ldrb	r3, [r1, r3]
 80030c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40023800 	.word	0x40023800
 80030cc:	08003a60 	.word	0x08003a60

080030d0 <siprintf>:
 80030d0:	b40e      	push	{r1, r2, r3}
 80030d2:	b500      	push	{lr}
 80030d4:	b09c      	sub	sp, #112	@ 0x70
 80030d6:	ab1d      	add	r3, sp, #116	@ 0x74
 80030d8:	9002      	str	r0, [sp, #8]
 80030da:	9006      	str	r0, [sp, #24]
 80030dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80030e0:	4809      	ldr	r0, [pc, #36]	@ (8003108 <siprintf+0x38>)
 80030e2:	9107      	str	r1, [sp, #28]
 80030e4:	9104      	str	r1, [sp, #16]
 80030e6:	4909      	ldr	r1, [pc, #36]	@ (800310c <siprintf+0x3c>)
 80030e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80030ec:	9105      	str	r1, [sp, #20]
 80030ee:	6800      	ldr	r0, [r0, #0]
 80030f0:	9301      	str	r3, [sp, #4]
 80030f2:	a902      	add	r1, sp, #8
 80030f4:	f000 f994 	bl	8003420 <_svfiprintf_r>
 80030f8:	9b02      	ldr	r3, [sp, #8]
 80030fa:	2200      	movs	r2, #0
 80030fc:	701a      	strb	r2, [r3, #0]
 80030fe:	b01c      	add	sp, #112	@ 0x70
 8003100:	f85d eb04 	ldr.w	lr, [sp], #4
 8003104:	b003      	add	sp, #12
 8003106:	4770      	bx	lr
 8003108:	20000010 	.word	0x20000010
 800310c:	ffff0208 	.word	0xffff0208

08003110 <memset>:
 8003110:	4402      	add	r2, r0
 8003112:	4603      	mov	r3, r0
 8003114:	4293      	cmp	r3, r2
 8003116:	d100      	bne.n	800311a <memset+0xa>
 8003118:	4770      	bx	lr
 800311a:	f803 1b01 	strb.w	r1, [r3], #1
 800311e:	e7f9      	b.n	8003114 <memset+0x4>

08003120 <__errno>:
 8003120:	4b01      	ldr	r3, [pc, #4]	@ (8003128 <__errno+0x8>)
 8003122:	6818      	ldr	r0, [r3, #0]
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	20000010 	.word	0x20000010

0800312c <__libc_init_array>:
 800312c:	b570      	push	{r4, r5, r6, lr}
 800312e:	4d0d      	ldr	r5, [pc, #52]	@ (8003164 <__libc_init_array+0x38>)
 8003130:	4c0d      	ldr	r4, [pc, #52]	@ (8003168 <__libc_init_array+0x3c>)
 8003132:	1b64      	subs	r4, r4, r5
 8003134:	10a4      	asrs	r4, r4, #2
 8003136:	2600      	movs	r6, #0
 8003138:	42a6      	cmp	r6, r4
 800313a:	d109      	bne.n	8003150 <__libc_init_array+0x24>
 800313c:	4d0b      	ldr	r5, [pc, #44]	@ (800316c <__libc_init_array+0x40>)
 800313e:	4c0c      	ldr	r4, [pc, #48]	@ (8003170 <__libc_init_array+0x44>)
 8003140:	f000 fc66 	bl	8003a10 <_init>
 8003144:	1b64      	subs	r4, r4, r5
 8003146:	10a4      	asrs	r4, r4, #2
 8003148:	2600      	movs	r6, #0
 800314a:	42a6      	cmp	r6, r4
 800314c:	d105      	bne.n	800315a <__libc_init_array+0x2e>
 800314e:	bd70      	pop	{r4, r5, r6, pc}
 8003150:	f855 3b04 	ldr.w	r3, [r5], #4
 8003154:	4798      	blx	r3
 8003156:	3601      	adds	r6, #1
 8003158:	e7ee      	b.n	8003138 <__libc_init_array+0xc>
 800315a:	f855 3b04 	ldr.w	r3, [r5], #4
 800315e:	4798      	blx	r3
 8003160:	3601      	adds	r6, #1
 8003162:	e7f2      	b.n	800314a <__libc_init_array+0x1e>
 8003164:	08003aa4 	.word	0x08003aa4
 8003168:	08003aa4 	.word	0x08003aa4
 800316c:	08003aa4 	.word	0x08003aa4
 8003170:	08003aa8 	.word	0x08003aa8

08003174 <__retarget_lock_acquire_recursive>:
 8003174:	4770      	bx	lr

08003176 <__retarget_lock_release_recursive>:
 8003176:	4770      	bx	lr

08003178 <_free_r>:
 8003178:	b538      	push	{r3, r4, r5, lr}
 800317a:	4605      	mov	r5, r0
 800317c:	2900      	cmp	r1, #0
 800317e:	d041      	beq.n	8003204 <_free_r+0x8c>
 8003180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003184:	1f0c      	subs	r4, r1, #4
 8003186:	2b00      	cmp	r3, #0
 8003188:	bfb8      	it	lt
 800318a:	18e4      	addlt	r4, r4, r3
 800318c:	f000 f8e0 	bl	8003350 <__malloc_lock>
 8003190:	4a1d      	ldr	r2, [pc, #116]	@ (8003208 <_free_r+0x90>)
 8003192:	6813      	ldr	r3, [r2, #0]
 8003194:	b933      	cbnz	r3, 80031a4 <_free_r+0x2c>
 8003196:	6063      	str	r3, [r4, #4]
 8003198:	6014      	str	r4, [r2, #0]
 800319a:	4628      	mov	r0, r5
 800319c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031a0:	f000 b8dc 	b.w	800335c <__malloc_unlock>
 80031a4:	42a3      	cmp	r3, r4
 80031a6:	d908      	bls.n	80031ba <_free_r+0x42>
 80031a8:	6820      	ldr	r0, [r4, #0]
 80031aa:	1821      	adds	r1, r4, r0
 80031ac:	428b      	cmp	r3, r1
 80031ae:	bf01      	itttt	eq
 80031b0:	6819      	ldreq	r1, [r3, #0]
 80031b2:	685b      	ldreq	r3, [r3, #4]
 80031b4:	1809      	addeq	r1, r1, r0
 80031b6:	6021      	streq	r1, [r4, #0]
 80031b8:	e7ed      	b.n	8003196 <_free_r+0x1e>
 80031ba:	461a      	mov	r2, r3
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	b10b      	cbz	r3, 80031c4 <_free_r+0x4c>
 80031c0:	42a3      	cmp	r3, r4
 80031c2:	d9fa      	bls.n	80031ba <_free_r+0x42>
 80031c4:	6811      	ldr	r1, [r2, #0]
 80031c6:	1850      	adds	r0, r2, r1
 80031c8:	42a0      	cmp	r0, r4
 80031ca:	d10b      	bne.n	80031e4 <_free_r+0x6c>
 80031cc:	6820      	ldr	r0, [r4, #0]
 80031ce:	4401      	add	r1, r0
 80031d0:	1850      	adds	r0, r2, r1
 80031d2:	4283      	cmp	r3, r0
 80031d4:	6011      	str	r1, [r2, #0]
 80031d6:	d1e0      	bne.n	800319a <_free_r+0x22>
 80031d8:	6818      	ldr	r0, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	6053      	str	r3, [r2, #4]
 80031de:	4408      	add	r0, r1
 80031e0:	6010      	str	r0, [r2, #0]
 80031e2:	e7da      	b.n	800319a <_free_r+0x22>
 80031e4:	d902      	bls.n	80031ec <_free_r+0x74>
 80031e6:	230c      	movs	r3, #12
 80031e8:	602b      	str	r3, [r5, #0]
 80031ea:	e7d6      	b.n	800319a <_free_r+0x22>
 80031ec:	6820      	ldr	r0, [r4, #0]
 80031ee:	1821      	adds	r1, r4, r0
 80031f0:	428b      	cmp	r3, r1
 80031f2:	bf04      	itt	eq
 80031f4:	6819      	ldreq	r1, [r3, #0]
 80031f6:	685b      	ldreq	r3, [r3, #4]
 80031f8:	6063      	str	r3, [r4, #4]
 80031fa:	bf04      	itt	eq
 80031fc:	1809      	addeq	r1, r1, r0
 80031fe:	6021      	streq	r1, [r4, #0]
 8003200:	6054      	str	r4, [r2, #4]
 8003202:	e7ca      	b.n	800319a <_free_r+0x22>
 8003204:	bd38      	pop	{r3, r4, r5, pc}
 8003206:	bf00      	nop
 8003208:	2000028c 	.word	0x2000028c

0800320c <sbrk_aligned>:
 800320c:	b570      	push	{r4, r5, r6, lr}
 800320e:	4e0f      	ldr	r6, [pc, #60]	@ (800324c <sbrk_aligned+0x40>)
 8003210:	460c      	mov	r4, r1
 8003212:	6831      	ldr	r1, [r6, #0]
 8003214:	4605      	mov	r5, r0
 8003216:	b911      	cbnz	r1, 800321e <sbrk_aligned+0x12>
 8003218:	f000 fba6 	bl	8003968 <_sbrk_r>
 800321c:	6030      	str	r0, [r6, #0]
 800321e:	4621      	mov	r1, r4
 8003220:	4628      	mov	r0, r5
 8003222:	f000 fba1 	bl	8003968 <_sbrk_r>
 8003226:	1c43      	adds	r3, r0, #1
 8003228:	d103      	bne.n	8003232 <sbrk_aligned+0x26>
 800322a:	f04f 34ff 	mov.w	r4, #4294967295
 800322e:	4620      	mov	r0, r4
 8003230:	bd70      	pop	{r4, r5, r6, pc}
 8003232:	1cc4      	adds	r4, r0, #3
 8003234:	f024 0403 	bic.w	r4, r4, #3
 8003238:	42a0      	cmp	r0, r4
 800323a:	d0f8      	beq.n	800322e <sbrk_aligned+0x22>
 800323c:	1a21      	subs	r1, r4, r0
 800323e:	4628      	mov	r0, r5
 8003240:	f000 fb92 	bl	8003968 <_sbrk_r>
 8003244:	3001      	adds	r0, #1
 8003246:	d1f2      	bne.n	800322e <sbrk_aligned+0x22>
 8003248:	e7ef      	b.n	800322a <sbrk_aligned+0x1e>
 800324a:	bf00      	nop
 800324c:	20000288 	.word	0x20000288

08003250 <_malloc_r>:
 8003250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003254:	1ccd      	adds	r5, r1, #3
 8003256:	f025 0503 	bic.w	r5, r5, #3
 800325a:	3508      	adds	r5, #8
 800325c:	2d0c      	cmp	r5, #12
 800325e:	bf38      	it	cc
 8003260:	250c      	movcc	r5, #12
 8003262:	2d00      	cmp	r5, #0
 8003264:	4606      	mov	r6, r0
 8003266:	db01      	blt.n	800326c <_malloc_r+0x1c>
 8003268:	42a9      	cmp	r1, r5
 800326a:	d904      	bls.n	8003276 <_malloc_r+0x26>
 800326c:	230c      	movs	r3, #12
 800326e:	6033      	str	r3, [r6, #0]
 8003270:	2000      	movs	r0, #0
 8003272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003276:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800334c <_malloc_r+0xfc>
 800327a:	f000 f869 	bl	8003350 <__malloc_lock>
 800327e:	f8d8 3000 	ldr.w	r3, [r8]
 8003282:	461c      	mov	r4, r3
 8003284:	bb44      	cbnz	r4, 80032d8 <_malloc_r+0x88>
 8003286:	4629      	mov	r1, r5
 8003288:	4630      	mov	r0, r6
 800328a:	f7ff ffbf 	bl	800320c <sbrk_aligned>
 800328e:	1c43      	adds	r3, r0, #1
 8003290:	4604      	mov	r4, r0
 8003292:	d158      	bne.n	8003346 <_malloc_r+0xf6>
 8003294:	f8d8 4000 	ldr.w	r4, [r8]
 8003298:	4627      	mov	r7, r4
 800329a:	2f00      	cmp	r7, #0
 800329c:	d143      	bne.n	8003326 <_malloc_r+0xd6>
 800329e:	2c00      	cmp	r4, #0
 80032a0:	d04b      	beq.n	800333a <_malloc_r+0xea>
 80032a2:	6823      	ldr	r3, [r4, #0]
 80032a4:	4639      	mov	r1, r7
 80032a6:	4630      	mov	r0, r6
 80032a8:	eb04 0903 	add.w	r9, r4, r3
 80032ac:	f000 fb5c 	bl	8003968 <_sbrk_r>
 80032b0:	4581      	cmp	r9, r0
 80032b2:	d142      	bne.n	800333a <_malloc_r+0xea>
 80032b4:	6821      	ldr	r1, [r4, #0]
 80032b6:	1a6d      	subs	r5, r5, r1
 80032b8:	4629      	mov	r1, r5
 80032ba:	4630      	mov	r0, r6
 80032bc:	f7ff ffa6 	bl	800320c <sbrk_aligned>
 80032c0:	3001      	adds	r0, #1
 80032c2:	d03a      	beq.n	800333a <_malloc_r+0xea>
 80032c4:	6823      	ldr	r3, [r4, #0]
 80032c6:	442b      	add	r3, r5
 80032c8:	6023      	str	r3, [r4, #0]
 80032ca:	f8d8 3000 	ldr.w	r3, [r8]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	bb62      	cbnz	r2, 800332c <_malloc_r+0xdc>
 80032d2:	f8c8 7000 	str.w	r7, [r8]
 80032d6:	e00f      	b.n	80032f8 <_malloc_r+0xa8>
 80032d8:	6822      	ldr	r2, [r4, #0]
 80032da:	1b52      	subs	r2, r2, r5
 80032dc:	d420      	bmi.n	8003320 <_malloc_r+0xd0>
 80032de:	2a0b      	cmp	r2, #11
 80032e0:	d917      	bls.n	8003312 <_malloc_r+0xc2>
 80032e2:	1961      	adds	r1, r4, r5
 80032e4:	42a3      	cmp	r3, r4
 80032e6:	6025      	str	r5, [r4, #0]
 80032e8:	bf18      	it	ne
 80032ea:	6059      	strne	r1, [r3, #4]
 80032ec:	6863      	ldr	r3, [r4, #4]
 80032ee:	bf08      	it	eq
 80032f0:	f8c8 1000 	streq.w	r1, [r8]
 80032f4:	5162      	str	r2, [r4, r5]
 80032f6:	604b      	str	r3, [r1, #4]
 80032f8:	4630      	mov	r0, r6
 80032fa:	f000 f82f 	bl	800335c <__malloc_unlock>
 80032fe:	f104 000b 	add.w	r0, r4, #11
 8003302:	1d23      	adds	r3, r4, #4
 8003304:	f020 0007 	bic.w	r0, r0, #7
 8003308:	1ac2      	subs	r2, r0, r3
 800330a:	bf1c      	itt	ne
 800330c:	1a1b      	subne	r3, r3, r0
 800330e:	50a3      	strne	r3, [r4, r2]
 8003310:	e7af      	b.n	8003272 <_malloc_r+0x22>
 8003312:	6862      	ldr	r2, [r4, #4]
 8003314:	42a3      	cmp	r3, r4
 8003316:	bf0c      	ite	eq
 8003318:	f8c8 2000 	streq.w	r2, [r8]
 800331c:	605a      	strne	r2, [r3, #4]
 800331e:	e7eb      	b.n	80032f8 <_malloc_r+0xa8>
 8003320:	4623      	mov	r3, r4
 8003322:	6864      	ldr	r4, [r4, #4]
 8003324:	e7ae      	b.n	8003284 <_malloc_r+0x34>
 8003326:	463c      	mov	r4, r7
 8003328:	687f      	ldr	r7, [r7, #4]
 800332a:	e7b6      	b.n	800329a <_malloc_r+0x4a>
 800332c:	461a      	mov	r2, r3
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	42a3      	cmp	r3, r4
 8003332:	d1fb      	bne.n	800332c <_malloc_r+0xdc>
 8003334:	2300      	movs	r3, #0
 8003336:	6053      	str	r3, [r2, #4]
 8003338:	e7de      	b.n	80032f8 <_malloc_r+0xa8>
 800333a:	230c      	movs	r3, #12
 800333c:	6033      	str	r3, [r6, #0]
 800333e:	4630      	mov	r0, r6
 8003340:	f000 f80c 	bl	800335c <__malloc_unlock>
 8003344:	e794      	b.n	8003270 <_malloc_r+0x20>
 8003346:	6005      	str	r5, [r0, #0]
 8003348:	e7d6      	b.n	80032f8 <_malloc_r+0xa8>
 800334a:	bf00      	nop
 800334c:	2000028c 	.word	0x2000028c

08003350 <__malloc_lock>:
 8003350:	4801      	ldr	r0, [pc, #4]	@ (8003358 <__malloc_lock+0x8>)
 8003352:	f7ff bf0f 	b.w	8003174 <__retarget_lock_acquire_recursive>
 8003356:	bf00      	nop
 8003358:	20000284 	.word	0x20000284

0800335c <__malloc_unlock>:
 800335c:	4801      	ldr	r0, [pc, #4]	@ (8003364 <__malloc_unlock+0x8>)
 800335e:	f7ff bf0a 	b.w	8003176 <__retarget_lock_release_recursive>
 8003362:	bf00      	nop
 8003364:	20000284 	.word	0x20000284

08003368 <__ssputs_r>:
 8003368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800336c:	688e      	ldr	r6, [r1, #8]
 800336e:	461f      	mov	r7, r3
 8003370:	42be      	cmp	r6, r7
 8003372:	680b      	ldr	r3, [r1, #0]
 8003374:	4682      	mov	sl, r0
 8003376:	460c      	mov	r4, r1
 8003378:	4690      	mov	r8, r2
 800337a:	d82d      	bhi.n	80033d8 <__ssputs_r+0x70>
 800337c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003380:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003384:	d026      	beq.n	80033d4 <__ssputs_r+0x6c>
 8003386:	6965      	ldr	r5, [r4, #20]
 8003388:	6909      	ldr	r1, [r1, #16]
 800338a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800338e:	eba3 0901 	sub.w	r9, r3, r1
 8003392:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003396:	1c7b      	adds	r3, r7, #1
 8003398:	444b      	add	r3, r9
 800339a:	106d      	asrs	r5, r5, #1
 800339c:	429d      	cmp	r5, r3
 800339e:	bf38      	it	cc
 80033a0:	461d      	movcc	r5, r3
 80033a2:	0553      	lsls	r3, r2, #21
 80033a4:	d527      	bpl.n	80033f6 <__ssputs_r+0x8e>
 80033a6:	4629      	mov	r1, r5
 80033a8:	f7ff ff52 	bl	8003250 <_malloc_r>
 80033ac:	4606      	mov	r6, r0
 80033ae:	b360      	cbz	r0, 800340a <__ssputs_r+0xa2>
 80033b0:	6921      	ldr	r1, [r4, #16]
 80033b2:	464a      	mov	r2, r9
 80033b4:	f000 fae8 	bl	8003988 <memcpy>
 80033b8:	89a3      	ldrh	r3, [r4, #12]
 80033ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80033be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033c2:	81a3      	strh	r3, [r4, #12]
 80033c4:	6126      	str	r6, [r4, #16]
 80033c6:	6165      	str	r5, [r4, #20]
 80033c8:	444e      	add	r6, r9
 80033ca:	eba5 0509 	sub.w	r5, r5, r9
 80033ce:	6026      	str	r6, [r4, #0]
 80033d0:	60a5      	str	r5, [r4, #8]
 80033d2:	463e      	mov	r6, r7
 80033d4:	42be      	cmp	r6, r7
 80033d6:	d900      	bls.n	80033da <__ssputs_r+0x72>
 80033d8:	463e      	mov	r6, r7
 80033da:	6820      	ldr	r0, [r4, #0]
 80033dc:	4632      	mov	r2, r6
 80033de:	4641      	mov	r1, r8
 80033e0:	f000 faa8 	bl	8003934 <memmove>
 80033e4:	68a3      	ldr	r3, [r4, #8]
 80033e6:	1b9b      	subs	r3, r3, r6
 80033e8:	60a3      	str	r3, [r4, #8]
 80033ea:	6823      	ldr	r3, [r4, #0]
 80033ec:	4433      	add	r3, r6
 80033ee:	6023      	str	r3, [r4, #0]
 80033f0:	2000      	movs	r0, #0
 80033f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033f6:	462a      	mov	r2, r5
 80033f8:	f000 fad4 	bl	80039a4 <_realloc_r>
 80033fc:	4606      	mov	r6, r0
 80033fe:	2800      	cmp	r0, #0
 8003400:	d1e0      	bne.n	80033c4 <__ssputs_r+0x5c>
 8003402:	6921      	ldr	r1, [r4, #16]
 8003404:	4650      	mov	r0, sl
 8003406:	f7ff feb7 	bl	8003178 <_free_r>
 800340a:	230c      	movs	r3, #12
 800340c:	f8ca 3000 	str.w	r3, [sl]
 8003410:	89a3      	ldrh	r3, [r4, #12]
 8003412:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003416:	81a3      	strh	r3, [r4, #12]
 8003418:	f04f 30ff 	mov.w	r0, #4294967295
 800341c:	e7e9      	b.n	80033f2 <__ssputs_r+0x8a>
	...

08003420 <_svfiprintf_r>:
 8003420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003424:	4698      	mov	r8, r3
 8003426:	898b      	ldrh	r3, [r1, #12]
 8003428:	061b      	lsls	r3, r3, #24
 800342a:	b09d      	sub	sp, #116	@ 0x74
 800342c:	4607      	mov	r7, r0
 800342e:	460d      	mov	r5, r1
 8003430:	4614      	mov	r4, r2
 8003432:	d510      	bpl.n	8003456 <_svfiprintf_r+0x36>
 8003434:	690b      	ldr	r3, [r1, #16]
 8003436:	b973      	cbnz	r3, 8003456 <_svfiprintf_r+0x36>
 8003438:	2140      	movs	r1, #64	@ 0x40
 800343a:	f7ff ff09 	bl	8003250 <_malloc_r>
 800343e:	6028      	str	r0, [r5, #0]
 8003440:	6128      	str	r0, [r5, #16]
 8003442:	b930      	cbnz	r0, 8003452 <_svfiprintf_r+0x32>
 8003444:	230c      	movs	r3, #12
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	f04f 30ff 	mov.w	r0, #4294967295
 800344c:	b01d      	add	sp, #116	@ 0x74
 800344e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003452:	2340      	movs	r3, #64	@ 0x40
 8003454:	616b      	str	r3, [r5, #20]
 8003456:	2300      	movs	r3, #0
 8003458:	9309      	str	r3, [sp, #36]	@ 0x24
 800345a:	2320      	movs	r3, #32
 800345c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003460:	f8cd 800c 	str.w	r8, [sp, #12]
 8003464:	2330      	movs	r3, #48	@ 0x30
 8003466:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003604 <_svfiprintf_r+0x1e4>
 800346a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800346e:	f04f 0901 	mov.w	r9, #1
 8003472:	4623      	mov	r3, r4
 8003474:	469a      	mov	sl, r3
 8003476:	f813 2b01 	ldrb.w	r2, [r3], #1
 800347a:	b10a      	cbz	r2, 8003480 <_svfiprintf_r+0x60>
 800347c:	2a25      	cmp	r2, #37	@ 0x25
 800347e:	d1f9      	bne.n	8003474 <_svfiprintf_r+0x54>
 8003480:	ebba 0b04 	subs.w	fp, sl, r4
 8003484:	d00b      	beq.n	800349e <_svfiprintf_r+0x7e>
 8003486:	465b      	mov	r3, fp
 8003488:	4622      	mov	r2, r4
 800348a:	4629      	mov	r1, r5
 800348c:	4638      	mov	r0, r7
 800348e:	f7ff ff6b 	bl	8003368 <__ssputs_r>
 8003492:	3001      	adds	r0, #1
 8003494:	f000 80a7 	beq.w	80035e6 <_svfiprintf_r+0x1c6>
 8003498:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800349a:	445a      	add	r2, fp
 800349c:	9209      	str	r2, [sp, #36]	@ 0x24
 800349e:	f89a 3000 	ldrb.w	r3, [sl]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 809f 	beq.w	80035e6 <_svfiprintf_r+0x1c6>
 80034a8:	2300      	movs	r3, #0
 80034aa:	f04f 32ff 	mov.w	r2, #4294967295
 80034ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034b2:	f10a 0a01 	add.w	sl, sl, #1
 80034b6:	9304      	str	r3, [sp, #16]
 80034b8:	9307      	str	r3, [sp, #28]
 80034ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80034be:	931a      	str	r3, [sp, #104]	@ 0x68
 80034c0:	4654      	mov	r4, sl
 80034c2:	2205      	movs	r2, #5
 80034c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034c8:	484e      	ldr	r0, [pc, #312]	@ (8003604 <_svfiprintf_r+0x1e4>)
 80034ca:	f7fc fe91 	bl	80001f0 <memchr>
 80034ce:	9a04      	ldr	r2, [sp, #16]
 80034d0:	b9d8      	cbnz	r0, 800350a <_svfiprintf_r+0xea>
 80034d2:	06d0      	lsls	r0, r2, #27
 80034d4:	bf44      	itt	mi
 80034d6:	2320      	movmi	r3, #32
 80034d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80034dc:	0711      	lsls	r1, r2, #28
 80034de:	bf44      	itt	mi
 80034e0:	232b      	movmi	r3, #43	@ 0x2b
 80034e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80034e6:	f89a 3000 	ldrb.w	r3, [sl]
 80034ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80034ec:	d015      	beq.n	800351a <_svfiprintf_r+0xfa>
 80034ee:	9a07      	ldr	r2, [sp, #28]
 80034f0:	4654      	mov	r4, sl
 80034f2:	2000      	movs	r0, #0
 80034f4:	f04f 0c0a 	mov.w	ip, #10
 80034f8:	4621      	mov	r1, r4
 80034fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034fe:	3b30      	subs	r3, #48	@ 0x30
 8003500:	2b09      	cmp	r3, #9
 8003502:	d94b      	bls.n	800359c <_svfiprintf_r+0x17c>
 8003504:	b1b0      	cbz	r0, 8003534 <_svfiprintf_r+0x114>
 8003506:	9207      	str	r2, [sp, #28]
 8003508:	e014      	b.n	8003534 <_svfiprintf_r+0x114>
 800350a:	eba0 0308 	sub.w	r3, r0, r8
 800350e:	fa09 f303 	lsl.w	r3, r9, r3
 8003512:	4313      	orrs	r3, r2
 8003514:	9304      	str	r3, [sp, #16]
 8003516:	46a2      	mov	sl, r4
 8003518:	e7d2      	b.n	80034c0 <_svfiprintf_r+0xa0>
 800351a:	9b03      	ldr	r3, [sp, #12]
 800351c:	1d19      	adds	r1, r3, #4
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	9103      	str	r1, [sp, #12]
 8003522:	2b00      	cmp	r3, #0
 8003524:	bfbb      	ittet	lt
 8003526:	425b      	neglt	r3, r3
 8003528:	f042 0202 	orrlt.w	r2, r2, #2
 800352c:	9307      	strge	r3, [sp, #28]
 800352e:	9307      	strlt	r3, [sp, #28]
 8003530:	bfb8      	it	lt
 8003532:	9204      	strlt	r2, [sp, #16]
 8003534:	7823      	ldrb	r3, [r4, #0]
 8003536:	2b2e      	cmp	r3, #46	@ 0x2e
 8003538:	d10a      	bne.n	8003550 <_svfiprintf_r+0x130>
 800353a:	7863      	ldrb	r3, [r4, #1]
 800353c:	2b2a      	cmp	r3, #42	@ 0x2a
 800353e:	d132      	bne.n	80035a6 <_svfiprintf_r+0x186>
 8003540:	9b03      	ldr	r3, [sp, #12]
 8003542:	1d1a      	adds	r2, r3, #4
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	9203      	str	r2, [sp, #12]
 8003548:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800354c:	3402      	adds	r4, #2
 800354e:	9305      	str	r3, [sp, #20]
 8003550:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003614 <_svfiprintf_r+0x1f4>
 8003554:	7821      	ldrb	r1, [r4, #0]
 8003556:	2203      	movs	r2, #3
 8003558:	4650      	mov	r0, sl
 800355a:	f7fc fe49 	bl	80001f0 <memchr>
 800355e:	b138      	cbz	r0, 8003570 <_svfiprintf_r+0x150>
 8003560:	9b04      	ldr	r3, [sp, #16]
 8003562:	eba0 000a 	sub.w	r0, r0, sl
 8003566:	2240      	movs	r2, #64	@ 0x40
 8003568:	4082      	lsls	r2, r0
 800356a:	4313      	orrs	r3, r2
 800356c:	3401      	adds	r4, #1
 800356e:	9304      	str	r3, [sp, #16]
 8003570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003574:	4824      	ldr	r0, [pc, #144]	@ (8003608 <_svfiprintf_r+0x1e8>)
 8003576:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800357a:	2206      	movs	r2, #6
 800357c:	f7fc fe38 	bl	80001f0 <memchr>
 8003580:	2800      	cmp	r0, #0
 8003582:	d036      	beq.n	80035f2 <_svfiprintf_r+0x1d2>
 8003584:	4b21      	ldr	r3, [pc, #132]	@ (800360c <_svfiprintf_r+0x1ec>)
 8003586:	bb1b      	cbnz	r3, 80035d0 <_svfiprintf_r+0x1b0>
 8003588:	9b03      	ldr	r3, [sp, #12]
 800358a:	3307      	adds	r3, #7
 800358c:	f023 0307 	bic.w	r3, r3, #7
 8003590:	3308      	adds	r3, #8
 8003592:	9303      	str	r3, [sp, #12]
 8003594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003596:	4433      	add	r3, r6
 8003598:	9309      	str	r3, [sp, #36]	@ 0x24
 800359a:	e76a      	b.n	8003472 <_svfiprintf_r+0x52>
 800359c:	fb0c 3202 	mla	r2, ip, r2, r3
 80035a0:	460c      	mov	r4, r1
 80035a2:	2001      	movs	r0, #1
 80035a4:	e7a8      	b.n	80034f8 <_svfiprintf_r+0xd8>
 80035a6:	2300      	movs	r3, #0
 80035a8:	3401      	adds	r4, #1
 80035aa:	9305      	str	r3, [sp, #20]
 80035ac:	4619      	mov	r1, r3
 80035ae:	f04f 0c0a 	mov.w	ip, #10
 80035b2:	4620      	mov	r0, r4
 80035b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035b8:	3a30      	subs	r2, #48	@ 0x30
 80035ba:	2a09      	cmp	r2, #9
 80035bc:	d903      	bls.n	80035c6 <_svfiprintf_r+0x1a6>
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0c6      	beq.n	8003550 <_svfiprintf_r+0x130>
 80035c2:	9105      	str	r1, [sp, #20]
 80035c4:	e7c4      	b.n	8003550 <_svfiprintf_r+0x130>
 80035c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80035ca:	4604      	mov	r4, r0
 80035cc:	2301      	movs	r3, #1
 80035ce:	e7f0      	b.n	80035b2 <_svfiprintf_r+0x192>
 80035d0:	ab03      	add	r3, sp, #12
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	462a      	mov	r2, r5
 80035d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003610 <_svfiprintf_r+0x1f0>)
 80035d8:	a904      	add	r1, sp, #16
 80035da:	4638      	mov	r0, r7
 80035dc:	f3af 8000 	nop.w
 80035e0:	1c42      	adds	r2, r0, #1
 80035e2:	4606      	mov	r6, r0
 80035e4:	d1d6      	bne.n	8003594 <_svfiprintf_r+0x174>
 80035e6:	89ab      	ldrh	r3, [r5, #12]
 80035e8:	065b      	lsls	r3, r3, #25
 80035ea:	f53f af2d 	bmi.w	8003448 <_svfiprintf_r+0x28>
 80035ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80035f0:	e72c      	b.n	800344c <_svfiprintf_r+0x2c>
 80035f2:	ab03      	add	r3, sp, #12
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	462a      	mov	r2, r5
 80035f8:	4b05      	ldr	r3, [pc, #20]	@ (8003610 <_svfiprintf_r+0x1f0>)
 80035fa:	a904      	add	r1, sp, #16
 80035fc:	4638      	mov	r0, r7
 80035fe:	f000 f879 	bl	80036f4 <_printf_i>
 8003602:	e7ed      	b.n	80035e0 <_svfiprintf_r+0x1c0>
 8003604:	08003a68 	.word	0x08003a68
 8003608:	08003a72 	.word	0x08003a72
 800360c:	00000000 	.word	0x00000000
 8003610:	08003369 	.word	0x08003369
 8003614:	08003a6e 	.word	0x08003a6e

08003618 <_printf_common>:
 8003618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800361c:	4616      	mov	r6, r2
 800361e:	4698      	mov	r8, r3
 8003620:	688a      	ldr	r2, [r1, #8]
 8003622:	690b      	ldr	r3, [r1, #16]
 8003624:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003628:	4293      	cmp	r3, r2
 800362a:	bfb8      	it	lt
 800362c:	4613      	movlt	r3, r2
 800362e:	6033      	str	r3, [r6, #0]
 8003630:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003634:	4607      	mov	r7, r0
 8003636:	460c      	mov	r4, r1
 8003638:	b10a      	cbz	r2, 800363e <_printf_common+0x26>
 800363a:	3301      	adds	r3, #1
 800363c:	6033      	str	r3, [r6, #0]
 800363e:	6823      	ldr	r3, [r4, #0]
 8003640:	0699      	lsls	r1, r3, #26
 8003642:	bf42      	ittt	mi
 8003644:	6833      	ldrmi	r3, [r6, #0]
 8003646:	3302      	addmi	r3, #2
 8003648:	6033      	strmi	r3, [r6, #0]
 800364a:	6825      	ldr	r5, [r4, #0]
 800364c:	f015 0506 	ands.w	r5, r5, #6
 8003650:	d106      	bne.n	8003660 <_printf_common+0x48>
 8003652:	f104 0a19 	add.w	sl, r4, #25
 8003656:	68e3      	ldr	r3, [r4, #12]
 8003658:	6832      	ldr	r2, [r6, #0]
 800365a:	1a9b      	subs	r3, r3, r2
 800365c:	42ab      	cmp	r3, r5
 800365e:	dc26      	bgt.n	80036ae <_printf_common+0x96>
 8003660:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003664:	6822      	ldr	r2, [r4, #0]
 8003666:	3b00      	subs	r3, #0
 8003668:	bf18      	it	ne
 800366a:	2301      	movne	r3, #1
 800366c:	0692      	lsls	r2, r2, #26
 800366e:	d42b      	bmi.n	80036c8 <_printf_common+0xb0>
 8003670:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003674:	4641      	mov	r1, r8
 8003676:	4638      	mov	r0, r7
 8003678:	47c8      	blx	r9
 800367a:	3001      	adds	r0, #1
 800367c:	d01e      	beq.n	80036bc <_printf_common+0xa4>
 800367e:	6823      	ldr	r3, [r4, #0]
 8003680:	6922      	ldr	r2, [r4, #16]
 8003682:	f003 0306 	and.w	r3, r3, #6
 8003686:	2b04      	cmp	r3, #4
 8003688:	bf02      	ittt	eq
 800368a:	68e5      	ldreq	r5, [r4, #12]
 800368c:	6833      	ldreq	r3, [r6, #0]
 800368e:	1aed      	subeq	r5, r5, r3
 8003690:	68a3      	ldr	r3, [r4, #8]
 8003692:	bf0c      	ite	eq
 8003694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003698:	2500      	movne	r5, #0
 800369a:	4293      	cmp	r3, r2
 800369c:	bfc4      	itt	gt
 800369e:	1a9b      	subgt	r3, r3, r2
 80036a0:	18ed      	addgt	r5, r5, r3
 80036a2:	2600      	movs	r6, #0
 80036a4:	341a      	adds	r4, #26
 80036a6:	42b5      	cmp	r5, r6
 80036a8:	d11a      	bne.n	80036e0 <_printf_common+0xc8>
 80036aa:	2000      	movs	r0, #0
 80036ac:	e008      	b.n	80036c0 <_printf_common+0xa8>
 80036ae:	2301      	movs	r3, #1
 80036b0:	4652      	mov	r2, sl
 80036b2:	4641      	mov	r1, r8
 80036b4:	4638      	mov	r0, r7
 80036b6:	47c8      	blx	r9
 80036b8:	3001      	adds	r0, #1
 80036ba:	d103      	bne.n	80036c4 <_printf_common+0xac>
 80036bc:	f04f 30ff 	mov.w	r0, #4294967295
 80036c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036c4:	3501      	adds	r5, #1
 80036c6:	e7c6      	b.n	8003656 <_printf_common+0x3e>
 80036c8:	18e1      	adds	r1, r4, r3
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	2030      	movs	r0, #48	@ 0x30
 80036ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80036d2:	4422      	add	r2, r4
 80036d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80036d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80036dc:	3302      	adds	r3, #2
 80036de:	e7c7      	b.n	8003670 <_printf_common+0x58>
 80036e0:	2301      	movs	r3, #1
 80036e2:	4622      	mov	r2, r4
 80036e4:	4641      	mov	r1, r8
 80036e6:	4638      	mov	r0, r7
 80036e8:	47c8      	blx	r9
 80036ea:	3001      	adds	r0, #1
 80036ec:	d0e6      	beq.n	80036bc <_printf_common+0xa4>
 80036ee:	3601      	adds	r6, #1
 80036f0:	e7d9      	b.n	80036a6 <_printf_common+0x8e>
	...

080036f4 <_printf_i>:
 80036f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036f8:	7e0f      	ldrb	r7, [r1, #24]
 80036fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80036fc:	2f78      	cmp	r7, #120	@ 0x78
 80036fe:	4691      	mov	r9, r2
 8003700:	4680      	mov	r8, r0
 8003702:	460c      	mov	r4, r1
 8003704:	469a      	mov	sl, r3
 8003706:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800370a:	d807      	bhi.n	800371c <_printf_i+0x28>
 800370c:	2f62      	cmp	r7, #98	@ 0x62
 800370e:	d80a      	bhi.n	8003726 <_printf_i+0x32>
 8003710:	2f00      	cmp	r7, #0
 8003712:	f000 80d2 	beq.w	80038ba <_printf_i+0x1c6>
 8003716:	2f58      	cmp	r7, #88	@ 0x58
 8003718:	f000 80b9 	beq.w	800388e <_printf_i+0x19a>
 800371c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003720:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003724:	e03a      	b.n	800379c <_printf_i+0xa8>
 8003726:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800372a:	2b15      	cmp	r3, #21
 800372c:	d8f6      	bhi.n	800371c <_printf_i+0x28>
 800372e:	a101      	add	r1, pc, #4	@ (adr r1, 8003734 <_printf_i+0x40>)
 8003730:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003734:	0800378d 	.word	0x0800378d
 8003738:	080037a1 	.word	0x080037a1
 800373c:	0800371d 	.word	0x0800371d
 8003740:	0800371d 	.word	0x0800371d
 8003744:	0800371d 	.word	0x0800371d
 8003748:	0800371d 	.word	0x0800371d
 800374c:	080037a1 	.word	0x080037a1
 8003750:	0800371d 	.word	0x0800371d
 8003754:	0800371d 	.word	0x0800371d
 8003758:	0800371d 	.word	0x0800371d
 800375c:	0800371d 	.word	0x0800371d
 8003760:	080038a1 	.word	0x080038a1
 8003764:	080037cb 	.word	0x080037cb
 8003768:	0800385b 	.word	0x0800385b
 800376c:	0800371d 	.word	0x0800371d
 8003770:	0800371d 	.word	0x0800371d
 8003774:	080038c3 	.word	0x080038c3
 8003778:	0800371d 	.word	0x0800371d
 800377c:	080037cb 	.word	0x080037cb
 8003780:	0800371d 	.word	0x0800371d
 8003784:	0800371d 	.word	0x0800371d
 8003788:	08003863 	.word	0x08003863
 800378c:	6833      	ldr	r3, [r6, #0]
 800378e:	1d1a      	adds	r2, r3, #4
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6032      	str	r2, [r6, #0]
 8003794:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003798:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800379c:	2301      	movs	r3, #1
 800379e:	e09d      	b.n	80038dc <_printf_i+0x1e8>
 80037a0:	6833      	ldr	r3, [r6, #0]
 80037a2:	6820      	ldr	r0, [r4, #0]
 80037a4:	1d19      	adds	r1, r3, #4
 80037a6:	6031      	str	r1, [r6, #0]
 80037a8:	0606      	lsls	r6, r0, #24
 80037aa:	d501      	bpl.n	80037b0 <_printf_i+0xbc>
 80037ac:	681d      	ldr	r5, [r3, #0]
 80037ae:	e003      	b.n	80037b8 <_printf_i+0xc4>
 80037b0:	0645      	lsls	r5, r0, #25
 80037b2:	d5fb      	bpl.n	80037ac <_printf_i+0xb8>
 80037b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80037b8:	2d00      	cmp	r5, #0
 80037ba:	da03      	bge.n	80037c4 <_printf_i+0xd0>
 80037bc:	232d      	movs	r3, #45	@ 0x2d
 80037be:	426d      	negs	r5, r5
 80037c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037c4:	4859      	ldr	r0, [pc, #356]	@ (800392c <_printf_i+0x238>)
 80037c6:	230a      	movs	r3, #10
 80037c8:	e011      	b.n	80037ee <_printf_i+0xfa>
 80037ca:	6821      	ldr	r1, [r4, #0]
 80037cc:	6833      	ldr	r3, [r6, #0]
 80037ce:	0608      	lsls	r0, r1, #24
 80037d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80037d4:	d402      	bmi.n	80037dc <_printf_i+0xe8>
 80037d6:	0649      	lsls	r1, r1, #25
 80037d8:	bf48      	it	mi
 80037da:	b2ad      	uxthmi	r5, r5
 80037dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80037de:	4853      	ldr	r0, [pc, #332]	@ (800392c <_printf_i+0x238>)
 80037e0:	6033      	str	r3, [r6, #0]
 80037e2:	bf14      	ite	ne
 80037e4:	230a      	movne	r3, #10
 80037e6:	2308      	moveq	r3, #8
 80037e8:	2100      	movs	r1, #0
 80037ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80037ee:	6866      	ldr	r6, [r4, #4]
 80037f0:	60a6      	str	r6, [r4, #8]
 80037f2:	2e00      	cmp	r6, #0
 80037f4:	bfa2      	ittt	ge
 80037f6:	6821      	ldrge	r1, [r4, #0]
 80037f8:	f021 0104 	bicge.w	r1, r1, #4
 80037fc:	6021      	strge	r1, [r4, #0]
 80037fe:	b90d      	cbnz	r5, 8003804 <_printf_i+0x110>
 8003800:	2e00      	cmp	r6, #0
 8003802:	d04b      	beq.n	800389c <_printf_i+0x1a8>
 8003804:	4616      	mov	r6, r2
 8003806:	fbb5 f1f3 	udiv	r1, r5, r3
 800380a:	fb03 5711 	mls	r7, r3, r1, r5
 800380e:	5dc7      	ldrb	r7, [r0, r7]
 8003810:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003814:	462f      	mov	r7, r5
 8003816:	42bb      	cmp	r3, r7
 8003818:	460d      	mov	r5, r1
 800381a:	d9f4      	bls.n	8003806 <_printf_i+0x112>
 800381c:	2b08      	cmp	r3, #8
 800381e:	d10b      	bne.n	8003838 <_printf_i+0x144>
 8003820:	6823      	ldr	r3, [r4, #0]
 8003822:	07df      	lsls	r7, r3, #31
 8003824:	d508      	bpl.n	8003838 <_printf_i+0x144>
 8003826:	6923      	ldr	r3, [r4, #16]
 8003828:	6861      	ldr	r1, [r4, #4]
 800382a:	4299      	cmp	r1, r3
 800382c:	bfde      	ittt	le
 800382e:	2330      	movle	r3, #48	@ 0x30
 8003830:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003834:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003838:	1b92      	subs	r2, r2, r6
 800383a:	6122      	str	r2, [r4, #16]
 800383c:	f8cd a000 	str.w	sl, [sp]
 8003840:	464b      	mov	r3, r9
 8003842:	aa03      	add	r2, sp, #12
 8003844:	4621      	mov	r1, r4
 8003846:	4640      	mov	r0, r8
 8003848:	f7ff fee6 	bl	8003618 <_printf_common>
 800384c:	3001      	adds	r0, #1
 800384e:	d14a      	bne.n	80038e6 <_printf_i+0x1f2>
 8003850:	f04f 30ff 	mov.w	r0, #4294967295
 8003854:	b004      	add	sp, #16
 8003856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	f043 0320 	orr.w	r3, r3, #32
 8003860:	6023      	str	r3, [r4, #0]
 8003862:	4833      	ldr	r0, [pc, #204]	@ (8003930 <_printf_i+0x23c>)
 8003864:	2778      	movs	r7, #120	@ 0x78
 8003866:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800386a:	6823      	ldr	r3, [r4, #0]
 800386c:	6831      	ldr	r1, [r6, #0]
 800386e:	061f      	lsls	r7, r3, #24
 8003870:	f851 5b04 	ldr.w	r5, [r1], #4
 8003874:	d402      	bmi.n	800387c <_printf_i+0x188>
 8003876:	065f      	lsls	r7, r3, #25
 8003878:	bf48      	it	mi
 800387a:	b2ad      	uxthmi	r5, r5
 800387c:	6031      	str	r1, [r6, #0]
 800387e:	07d9      	lsls	r1, r3, #31
 8003880:	bf44      	itt	mi
 8003882:	f043 0320 	orrmi.w	r3, r3, #32
 8003886:	6023      	strmi	r3, [r4, #0]
 8003888:	b11d      	cbz	r5, 8003892 <_printf_i+0x19e>
 800388a:	2310      	movs	r3, #16
 800388c:	e7ac      	b.n	80037e8 <_printf_i+0xf4>
 800388e:	4827      	ldr	r0, [pc, #156]	@ (800392c <_printf_i+0x238>)
 8003890:	e7e9      	b.n	8003866 <_printf_i+0x172>
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	f023 0320 	bic.w	r3, r3, #32
 8003898:	6023      	str	r3, [r4, #0]
 800389a:	e7f6      	b.n	800388a <_printf_i+0x196>
 800389c:	4616      	mov	r6, r2
 800389e:	e7bd      	b.n	800381c <_printf_i+0x128>
 80038a0:	6833      	ldr	r3, [r6, #0]
 80038a2:	6825      	ldr	r5, [r4, #0]
 80038a4:	6961      	ldr	r1, [r4, #20]
 80038a6:	1d18      	adds	r0, r3, #4
 80038a8:	6030      	str	r0, [r6, #0]
 80038aa:	062e      	lsls	r6, r5, #24
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	d501      	bpl.n	80038b4 <_printf_i+0x1c0>
 80038b0:	6019      	str	r1, [r3, #0]
 80038b2:	e002      	b.n	80038ba <_printf_i+0x1c6>
 80038b4:	0668      	lsls	r0, r5, #25
 80038b6:	d5fb      	bpl.n	80038b0 <_printf_i+0x1bc>
 80038b8:	8019      	strh	r1, [r3, #0]
 80038ba:	2300      	movs	r3, #0
 80038bc:	6123      	str	r3, [r4, #16]
 80038be:	4616      	mov	r6, r2
 80038c0:	e7bc      	b.n	800383c <_printf_i+0x148>
 80038c2:	6833      	ldr	r3, [r6, #0]
 80038c4:	1d1a      	adds	r2, r3, #4
 80038c6:	6032      	str	r2, [r6, #0]
 80038c8:	681e      	ldr	r6, [r3, #0]
 80038ca:	6862      	ldr	r2, [r4, #4]
 80038cc:	2100      	movs	r1, #0
 80038ce:	4630      	mov	r0, r6
 80038d0:	f7fc fc8e 	bl	80001f0 <memchr>
 80038d4:	b108      	cbz	r0, 80038da <_printf_i+0x1e6>
 80038d6:	1b80      	subs	r0, r0, r6
 80038d8:	6060      	str	r0, [r4, #4]
 80038da:	6863      	ldr	r3, [r4, #4]
 80038dc:	6123      	str	r3, [r4, #16]
 80038de:	2300      	movs	r3, #0
 80038e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80038e4:	e7aa      	b.n	800383c <_printf_i+0x148>
 80038e6:	6923      	ldr	r3, [r4, #16]
 80038e8:	4632      	mov	r2, r6
 80038ea:	4649      	mov	r1, r9
 80038ec:	4640      	mov	r0, r8
 80038ee:	47d0      	blx	sl
 80038f0:	3001      	adds	r0, #1
 80038f2:	d0ad      	beq.n	8003850 <_printf_i+0x15c>
 80038f4:	6823      	ldr	r3, [r4, #0]
 80038f6:	079b      	lsls	r3, r3, #30
 80038f8:	d413      	bmi.n	8003922 <_printf_i+0x22e>
 80038fa:	68e0      	ldr	r0, [r4, #12]
 80038fc:	9b03      	ldr	r3, [sp, #12]
 80038fe:	4298      	cmp	r0, r3
 8003900:	bfb8      	it	lt
 8003902:	4618      	movlt	r0, r3
 8003904:	e7a6      	b.n	8003854 <_printf_i+0x160>
 8003906:	2301      	movs	r3, #1
 8003908:	4632      	mov	r2, r6
 800390a:	4649      	mov	r1, r9
 800390c:	4640      	mov	r0, r8
 800390e:	47d0      	blx	sl
 8003910:	3001      	adds	r0, #1
 8003912:	d09d      	beq.n	8003850 <_printf_i+0x15c>
 8003914:	3501      	adds	r5, #1
 8003916:	68e3      	ldr	r3, [r4, #12]
 8003918:	9903      	ldr	r1, [sp, #12]
 800391a:	1a5b      	subs	r3, r3, r1
 800391c:	42ab      	cmp	r3, r5
 800391e:	dcf2      	bgt.n	8003906 <_printf_i+0x212>
 8003920:	e7eb      	b.n	80038fa <_printf_i+0x206>
 8003922:	2500      	movs	r5, #0
 8003924:	f104 0619 	add.w	r6, r4, #25
 8003928:	e7f5      	b.n	8003916 <_printf_i+0x222>
 800392a:	bf00      	nop
 800392c:	08003a79 	.word	0x08003a79
 8003930:	08003a8a 	.word	0x08003a8a

08003934 <memmove>:
 8003934:	4288      	cmp	r0, r1
 8003936:	b510      	push	{r4, lr}
 8003938:	eb01 0402 	add.w	r4, r1, r2
 800393c:	d902      	bls.n	8003944 <memmove+0x10>
 800393e:	4284      	cmp	r4, r0
 8003940:	4623      	mov	r3, r4
 8003942:	d807      	bhi.n	8003954 <memmove+0x20>
 8003944:	1e43      	subs	r3, r0, #1
 8003946:	42a1      	cmp	r1, r4
 8003948:	d008      	beq.n	800395c <memmove+0x28>
 800394a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800394e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003952:	e7f8      	b.n	8003946 <memmove+0x12>
 8003954:	4402      	add	r2, r0
 8003956:	4601      	mov	r1, r0
 8003958:	428a      	cmp	r2, r1
 800395a:	d100      	bne.n	800395e <memmove+0x2a>
 800395c:	bd10      	pop	{r4, pc}
 800395e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003962:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003966:	e7f7      	b.n	8003958 <memmove+0x24>

08003968 <_sbrk_r>:
 8003968:	b538      	push	{r3, r4, r5, lr}
 800396a:	4d06      	ldr	r5, [pc, #24]	@ (8003984 <_sbrk_r+0x1c>)
 800396c:	2300      	movs	r3, #0
 800396e:	4604      	mov	r4, r0
 8003970:	4608      	mov	r0, r1
 8003972:	602b      	str	r3, [r5, #0]
 8003974:	f7fd fc60 	bl	8001238 <_sbrk>
 8003978:	1c43      	adds	r3, r0, #1
 800397a:	d102      	bne.n	8003982 <_sbrk_r+0x1a>
 800397c:	682b      	ldr	r3, [r5, #0]
 800397e:	b103      	cbz	r3, 8003982 <_sbrk_r+0x1a>
 8003980:	6023      	str	r3, [r4, #0]
 8003982:	bd38      	pop	{r3, r4, r5, pc}
 8003984:	20000280 	.word	0x20000280

08003988 <memcpy>:
 8003988:	440a      	add	r2, r1
 800398a:	4291      	cmp	r1, r2
 800398c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003990:	d100      	bne.n	8003994 <memcpy+0xc>
 8003992:	4770      	bx	lr
 8003994:	b510      	push	{r4, lr}
 8003996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800399a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800399e:	4291      	cmp	r1, r2
 80039a0:	d1f9      	bne.n	8003996 <memcpy+0xe>
 80039a2:	bd10      	pop	{r4, pc}

080039a4 <_realloc_r>:
 80039a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039a8:	4680      	mov	r8, r0
 80039aa:	4615      	mov	r5, r2
 80039ac:	460c      	mov	r4, r1
 80039ae:	b921      	cbnz	r1, 80039ba <_realloc_r+0x16>
 80039b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039b4:	4611      	mov	r1, r2
 80039b6:	f7ff bc4b 	b.w	8003250 <_malloc_r>
 80039ba:	b92a      	cbnz	r2, 80039c8 <_realloc_r+0x24>
 80039bc:	f7ff fbdc 	bl	8003178 <_free_r>
 80039c0:	2400      	movs	r4, #0
 80039c2:	4620      	mov	r0, r4
 80039c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039c8:	f000 f81a 	bl	8003a00 <_malloc_usable_size_r>
 80039cc:	4285      	cmp	r5, r0
 80039ce:	4606      	mov	r6, r0
 80039d0:	d802      	bhi.n	80039d8 <_realloc_r+0x34>
 80039d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80039d6:	d8f4      	bhi.n	80039c2 <_realloc_r+0x1e>
 80039d8:	4629      	mov	r1, r5
 80039da:	4640      	mov	r0, r8
 80039dc:	f7ff fc38 	bl	8003250 <_malloc_r>
 80039e0:	4607      	mov	r7, r0
 80039e2:	2800      	cmp	r0, #0
 80039e4:	d0ec      	beq.n	80039c0 <_realloc_r+0x1c>
 80039e6:	42b5      	cmp	r5, r6
 80039e8:	462a      	mov	r2, r5
 80039ea:	4621      	mov	r1, r4
 80039ec:	bf28      	it	cs
 80039ee:	4632      	movcs	r2, r6
 80039f0:	f7ff ffca 	bl	8003988 <memcpy>
 80039f4:	4621      	mov	r1, r4
 80039f6:	4640      	mov	r0, r8
 80039f8:	f7ff fbbe 	bl	8003178 <_free_r>
 80039fc:	463c      	mov	r4, r7
 80039fe:	e7e0      	b.n	80039c2 <_realloc_r+0x1e>

08003a00 <_malloc_usable_size_r>:
 8003a00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a04:	1f18      	subs	r0, r3, #4
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	bfbc      	itt	lt
 8003a0a:	580b      	ldrlt	r3, [r1, r0]
 8003a0c:	18c0      	addlt	r0, r0, r3
 8003a0e:	4770      	bx	lr

08003a10 <_init>:
 8003a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a12:	bf00      	nop
 8003a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a16:	bc08      	pop	{r3}
 8003a18:	469e      	mov	lr, r3
 8003a1a:	4770      	bx	lr

08003a1c <_fini>:
 8003a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1e:	bf00      	nop
 8003a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a22:	bc08      	pop	{r3}
 8003a24:	469e      	mov	lr, r3
 8003a26:	4770      	bx	lr
